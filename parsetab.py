
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEleftLTGTNECOLON COMMA CTE_FLOAT CTE_INT CTE_STRING DIVIDE DO ELSE END EQUALS FLOAT GT ID IF INT LBRACE LPAREN LT MAIN MINUS NE PLUS PRINT PROGRAM RBRACE RPAREN SEMICOLON TIMES VAR VOID WHILEprogram : PROGRAM ID SEMICOLON a_vars a_funcs MAIN body ENDa_vars : empty\n              | varsa_funcs : empty\n               | funcs b_funcsb_funcs : funcs b_funcs\n                | funcsvars : VAR ID COLON type SEMICOLON list_vars\n    list_vars : empty\n                 | ID COLON type SEMICOLON list_vars\n    type : INT\n            | FLOATbody : LBRACE list_statements RBRACElist_statements : statement body_rep\n                       | empty\n                       | statementstatement : assign\n                 | condition\n                 | cycle\n                 | f_call\n                 | print_stmtbody_rep : statement body_rep\n                       | statementprint_stmt : PRINT LPAREN list_expresion RPAREN SEMICOLONlist_expresion : expresion addPrint\n                    | expresion addPrint COMMA list_expresion\n                    | CTE_STRING addPrintString\n                    | CTE_STRING addPrintString COMMA list_expresionaddPrint : addPrintString : assign : ID add_operand EQUALS add_operador expresion SEMICOLONadd_operand : add_operador : cycle : DO body WHILE LPAREN expresion RPAREN SEMICOLONcondition : IF LPAREN expresion RPAREN gotof body else_part SEMICOLONgotof : else_part : ELSE goto body\n                 | emptygoto : expresion : exp comparar_exp exp\n                | expcomparar_exp : LT\n                    | GT\n                    | NEexp : termino add_termino \n            | termino add_termino next_terminoadd_termino : next_termino : sum_rest exp sum_rest : PLUS\n                | MINUStermino : factor add_factor next_factor\n                | factor add_factornext_factor : mult_div terminomult_div : TIMES\n                | DIVIDEfactor : LPAREN expresion RPAREN\n                | id_cteadd_factor : id_cte : ID push_var\n              | cte push_constpush_const : push_var : cte : CTE_INT\n           | CTE_FLOATfuncs : VOID ID LPAREN list_params RPAREN LBRACE var_no_var body RBRACE SEMICOLONlist_params : empty\n                   | ID COLON type more_paramsmore_params : empty\n                   | COMMA ID COLON type more_paramsvar_no_var : empty\n                  | varsf_call : ID LPAREN RPAREN SEMICOLONempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,26,],[0,-1,]),'ID':([2,8,12,20,22,28,30,31,32,33,34,42,44,48,50,57,59,76,77,80,81,82,83,88,94,104,105,106,108,109,110,112,113,114,117,118,131,134,],[3,13,17,35,39,35,-17,-18,-19,-20,-21,53,35,65,65,-33,65,65,-72,65,-42,-43,-44,65,115,65,-49,-50,65,-54,-55,-24,65,65,53,-31,-34,-35,]),'SEMICOLON':([3,23,24,25,43,58,61,62,63,64,65,66,67,68,84,85,86,87,89,98,99,100,102,103,107,119,120,121,122,126,128,130,137,],[4,42,-11,-12,-13,77,-41,-47,-58,-57,-62,-61,-63,-64,-45,-52,-59,-60,112,117,118,-56,-40,-46,-51,-73,-48,-53,131,133,134,-38,-37,]),'VOID':([4,5,6,7,11,15,42,54,55,117,127,133,],[-73,12,-2,-3,12,12,-73,-8,-9,-73,-10,-65,]),'MAIN':([4,5,6,7,9,10,15,16,21,42,54,55,117,127,133,],[-73,-73,-2,-3,14,-4,-7,-5,-6,-73,-8,-9,-73,-10,-65,]),'VAR':([4,74,],[8,8,]),'COLON':([13,39,53,115,],[18,51,75,125,]),'LBRACE':([14,37,42,52,54,55,74,79,95,96,97,101,117,127,129,135,],[20,20,-73,74,-8,-9,-73,-36,20,-70,-71,20,-73,-10,-39,20,]),'LPAREN':([17,35,36,38,48,50,57,59,69,76,80,81,82,83,88,104,105,106,108,109,110,113,114,],[22,47,48,50,59,59,-33,59,88,59,59,-42,-43,-44,59,59,-49,-50,59,-54,-55,59,59,]),'INT':([18,51,75,125,],[24,24,24,24,]),'FLOAT':([18,51,75,125,],[25,25,25,25,]),'END':([19,43,],[26,-13,]),'RBRACE':([20,27,28,29,30,31,32,33,34,43,44,45,56,77,112,116,118,131,134,],[-73,43,-16,-15,-17,-18,-19,-20,-21,-13,-23,-14,-22,-72,-24,126,-31,-34,-35,]),'IF':([20,28,30,31,32,33,34,44,77,112,118,131,134,],[36,36,-17,-18,-19,-20,-21,36,-72,-24,-31,-34,-35,]),'DO':([20,28,30,31,32,33,34,44,77,112,118,131,134,],[37,37,-17,-18,-19,-20,-21,37,-72,-24,-31,-34,-35,]),'PRINT':([20,28,30,31,32,33,34,44,77,112,118,131,134,],[38,38,-17,-18,-19,-20,-21,38,-72,-24,-31,-34,-35,]),'RPAREN':([22,24,25,40,41,47,60,61,62,63,64,65,66,67,68,70,71,72,73,78,84,85,86,87,90,91,92,93,100,102,103,107,111,120,121,123,124,132,136,],[-73,-11,-12,52,-66,58,79,-41,-47,-58,-57,-62,-61,-63,-64,89,-29,-30,-73,100,-45,-52,-59,-60,-25,-27,-67,-68,-56,-40,-46,-51,122,-48,-53,-26,-28,-73,-69,]),'COMMA':([24,25,61,62,63,64,65,66,67,68,71,72,73,84,85,86,87,90,91,100,102,103,107,120,121,132,],[-11,-12,-41,-47,-58,-57,-62,-61,-63,-64,-29,-30,94,-45,-52,-59,-60,113,114,-56,-40,-46,-51,-48,-53,94,]),'EQUALS':([35,46,],[-32,57,]),'WHILE':([43,49,],[-13,69,]),'ELSE':([43,119,],[-13,129,]),'CTE_INT':([48,50,57,59,76,80,81,82,83,88,104,105,106,108,109,110,113,114,],[67,67,-33,67,67,67,-42,-43,-44,67,67,-49,-50,67,-54,-55,67,67,]),'CTE_FLOAT':([48,50,57,59,76,80,81,82,83,88,104,105,106,108,109,110,113,114,],[68,68,-33,68,68,68,-42,-43,-44,68,68,-49,-50,68,-54,-55,68,68,]),'CTE_STRING':([50,113,114,],[72,72,72,]),'LT':([61,62,63,64,65,66,67,68,84,85,86,87,100,103,107,120,121,],[81,-47,-58,-57,-62,-61,-63,-64,-45,-52,-59,-60,-56,-46,-51,-48,-53,]),'GT':([61,62,63,64,65,66,67,68,84,85,86,87,100,103,107,120,121,],[82,-47,-58,-57,-62,-61,-63,-64,-45,-52,-59,-60,-56,-46,-51,-48,-53,]),'NE':([61,62,63,64,65,66,67,68,84,85,86,87,100,103,107,120,121,],[83,-47,-58,-57,-62,-61,-63,-64,-45,-52,-59,-60,-56,-46,-51,-48,-53,]),'PLUS':([62,63,64,65,66,67,68,84,85,86,87,100,107,121,],[-47,-58,-57,-62,-61,-63,-64,105,-52,-59,-60,-56,-51,-53,]),'MINUS':([62,63,64,65,66,67,68,84,85,86,87,100,107,121,],[-47,-58,-57,-62,-61,-63,-64,106,-52,-59,-60,-56,-51,-53,]),'TIMES':([63,64,65,66,67,68,85,86,87,100,],[-58,-57,-62,-61,-63,-64,109,-59,-60,-56,]),'DIVIDE':([63,64,65,66,67,68,85,86,87,100,],[-58,-57,-62,-61,-63,-64,110,-59,-60,-56,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'a_vars':([4,],[5,]),'empty':([4,5,20,22,42,73,74,117,119,132,],[6,10,29,41,55,93,96,55,130,93,]),'vars':([4,74,],[7,97,]),'a_funcs':([5,],[9,]),'funcs':([5,11,15,],[11,15,15,]),'b_funcs':([11,15,],[16,21,]),'body':([14,37,95,101,135,],[19,49,116,119,137,]),'type':([18,51,75,125,],[23,73,98,132,]),'list_statements':([20,],[27,]),'statement':([20,28,44,],[28,44,44,]),'assign':([20,28,44,],[30,30,30,]),'condition':([20,28,44,],[31,31,31,]),'cycle':([20,28,44,],[32,32,32,]),'f_call':([20,28,44,],[33,33,33,]),'print_stmt':([20,28,44,],[34,34,34,]),'list_params':([22,],[40,]),'body_rep':([28,44,],[45,56,]),'add_operand':([35,],[46,]),'list_vars':([42,117,],[54,127,]),'expresion':([48,50,59,76,88,113,114,],[60,71,78,99,111,71,71,]),'exp':([48,50,59,76,80,88,104,113,114,],[61,61,61,61,102,61,120,61,61,]),'termino':([48,50,59,76,80,88,104,108,113,114,],[62,62,62,62,62,62,62,121,62,62,]),'factor':([48,50,59,76,80,88,104,108,113,114,],[63,63,63,63,63,63,63,63,63,63,]),'id_cte':([48,50,59,76,80,88,104,108,113,114,],[64,64,64,64,64,64,64,64,64,64,]),'cte':([48,50,59,76,80,88,104,108,113,114,],[66,66,66,66,66,66,66,66,66,66,]),'list_expresion':([50,113,114,],[70,123,124,]),'add_operador':([57,],[76,]),'comparar_exp':([61,],[80,]),'add_termino':([62,],[84,]),'add_factor':([63,],[85,]),'push_var':([65,],[86,]),'push_const':([66,],[87,]),'addPrint':([71,],[90,]),'addPrintString':([72,],[91,]),'more_params':([73,132,],[92,136,]),'var_no_var':([74,],[95,]),'gotof':([79,],[101,]),'next_termino':([84,],[103,]),'sum_rest':([84,],[104,]),'next_factor':([85,],[107,]),'mult_div':([85,],[108,]),'else_part':([119,],[128,]),'goto':([129,],[135,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON a_vars a_funcs MAIN body END','program',8,'p_program','little_duck_pars.py',16),
  ('a_vars -> empty','a_vars',1,'p_a_vars','little_duck_pars.py',20),
  ('a_vars -> vars','a_vars',1,'p_a_vars','little_duck_pars.py',21),
  ('a_funcs -> empty','a_funcs',1,'p_a_funcs','little_duck_pars.py',29),
  ('a_funcs -> funcs b_funcs','a_funcs',2,'p_a_funcs','little_duck_pars.py',30),
  ('b_funcs -> funcs b_funcs','b_funcs',2,'p_b_funcs','little_duck_pars.py',34),
  ('b_funcs -> funcs','b_funcs',1,'p_b_funcs','little_duck_pars.py',35),
  ('vars -> VAR ID COLON type SEMICOLON list_vars','vars',6,'p_vars','little_duck_pars.py',40),
  ('list_vars -> empty','list_vars',1,'p_list_vars','little_duck_pars.py',46),
  ('list_vars -> ID COLON type SEMICOLON list_vars','list_vars',5,'p_list_vars','little_duck_pars.py',47),
  ('type -> INT','type',1,'p_type','little_duck_pars.py',96),
  ('type -> FLOAT','type',1,'p_type','little_duck_pars.py',97),
  ('body -> LBRACE list_statements RBRACE','body',3,'p_body','little_duck_pars.py',101),
  ('list_statements -> statement body_rep','list_statements',2,'p_list_statements','little_duck_pars.py',105),
  ('list_statements -> empty','list_statements',1,'p_list_statements','little_duck_pars.py',106),
  ('list_statements -> statement','list_statements',1,'p_list_statements','little_duck_pars.py',107),
  ('statement -> assign','statement',1,'p_statement','little_duck_pars.py',111),
  ('statement -> condition','statement',1,'p_statement','little_duck_pars.py',112),
  ('statement -> cycle','statement',1,'p_statement','little_duck_pars.py',113),
  ('statement -> f_call','statement',1,'p_statement','little_duck_pars.py',114),
  ('statement -> print_stmt','statement',1,'p_statement','little_duck_pars.py',115),
  ('body_rep -> statement body_rep','body_rep',2,'p_body_rep','little_duck_pars.py',119),
  ('body_rep -> statement','body_rep',1,'p_body_rep','little_duck_pars.py',120),
  ('print_stmt -> PRINT LPAREN list_expresion RPAREN SEMICOLON','print_stmt',5,'p_print_stmt','little_duck_pars.py',124),
  ('list_expresion -> expresion addPrint','list_expresion',2,'p_list_expresion','little_duck_pars.py',128),
  ('list_expresion -> expresion addPrint COMMA list_expresion','list_expresion',4,'p_list_expresion','little_duck_pars.py',129),
  ('list_expresion -> CTE_STRING addPrintString','list_expresion',2,'p_list_expresion','little_duck_pars.py',130),
  ('list_expresion -> CTE_STRING addPrintString COMMA list_expresion','list_expresion',4,'p_list_expresion','little_duck_pars.py',131),
  ('addPrint -> <empty>','addPrint',0,'p_addPrint','little_duck_pars.py',135),
  ('addPrintString -> <empty>','addPrintString',0,'p_addPrintString','little_duck_pars.py',139),
  ('assign -> ID add_operand EQUALS add_operador expresion SEMICOLON','assign',6,'p_assign','little_duck_pars.py',143),
  ('add_operand -> <empty>','add_operand',0,'p_add_operand','little_duck_pars.py',148),
  ('add_operador -> <empty>','add_operador',0,'p_add_operador','little_duck_pars.py',152),
  ('cycle -> DO body WHILE LPAREN expresion RPAREN SEMICOLON','cycle',7,'p_cycle','little_duck_pars.py',156),
  ('condition -> IF LPAREN expresion RPAREN gotof body else_part SEMICOLON','condition',8,'p_condition','little_duck_pars.py',160),
  ('gotof -> <empty>','gotof',0,'p_gotof','little_duck_pars.py',164),
  ('else_part -> ELSE goto body','else_part',3,'p_else_part','little_duck_pars.py',168),
  ('else_part -> empty','else_part',1,'p_else_part','little_duck_pars.py',169),
  ('goto -> <empty>','goto',0,'p_goto','little_duck_pars.py',173),
  ('expresion -> exp comparar_exp exp','expresion',3,'p_expresion','little_duck_pars.py',177),
  ('expresion -> exp','expresion',1,'p_expresion','little_duck_pars.py',178),
  ('comparar_exp -> LT','comparar_exp',1,'p_comparar_exp','little_duck_pars.py',182),
  ('comparar_exp -> GT','comparar_exp',1,'p_comparar_exp','little_duck_pars.py',183),
  ('comparar_exp -> NE','comparar_exp',1,'p_comparar_exp','little_duck_pars.py',184),
  ('exp -> termino add_termino','exp',2,'p_exp','little_duck_pars.py',188),
  ('exp -> termino add_termino next_termino','exp',3,'p_exp','little_duck_pars.py',189),
  ('add_termino -> <empty>','add_termino',0,'p_add_termino','little_duck_pars.py',193),
  ('next_termino -> sum_rest exp','next_termino',2,'p_next_termino','little_duck_pars.py',197),
  ('sum_rest -> PLUS','sum_rest',1,'p_sum_rest','little_duck_pars.py',201),
  ('sum_rest -> MINUS','sum_rest',1,'p_sum_rest','little_duck_pars.py',202),
  ('termino -> factor add_factor next_factor','termino',3,'p_termino','little_duck_pars.py',207),
  ('termino -> factor add_factor','termino',2,'p_termino','little_duck_pars.py',208),
  ('next_factor -> mult_div termino','next_factor',2,'p_next_factor','little_duck_pars.py',212),
  ('mult_div -> TIMES','mult_div',1,'p_mult_div','little_duck_pars.py',216),
  ('mult_div -> DIVIDE','mult_div',1,'p_mult_div','little_duck_pars.py',217),
  ('factor -> LPAREN expresion RPAREN','factor',3,'p_factor','little_duck_pars.py',222),
  ('factor -> id_cte','factor',1,'p_factor','little_duck_pars.py',223),
  ('add_factor -> <empty>','add_factor',0,'p_add_factor','little_duck_pars.py',229),
  ('id_cte -> ID push_var','id_cte',2,'p_id_cte','little_duck_pars.py',233),
  ('id_cte -> cte push_const','id_cte',2,'p_id_cte','little_duck_pars.py',234),
  ('push_const -> <empty>','push_const',0,'p_push_const','little_duck_pars.py',238),
  ('push_var -> <empty>','push_var',0,'p_push_var','little_duck_pars.py',242),
  ('cte -> CTE_INT','cte',1,'p_cte','little_duck_pars.py',246),
  ('cte -> CTE_FLOAT','cte',1,'p_cte','little_duck_pars.py',247),
  ('funcs -> VOID ID LPAREN list_params RPAREN LBRACE var_no_var body RBRACE SEMICOLON','funcs',10,'p_funcs','little_duck_pars.py',251),
  ('list_params -> empty','list_params',1,'p_list_params','little_duck_pars.py',255),
  ('list_params -> ID COLON type more_params','list_params',4,'p_list_params','little_duck_pars.py',256),
  ('more_params -> empty','more_params',1,'p_more_params','little_duck_pars.py',260),
  ('more_params -> COMMA ID COLON type more_params','more_params',5,'p_more_params','little_duck_pars.py',261),
  ('var_no_var -> empty','var_no_var',1,'p_var_no_var','little_duck_pars.py',265),
  ('var_no_var -> vars','var_no_var',1,'p_var_no_var','little_duck_pars.py',266),
  ('f_call -> ID LPAREN RPAREN SEMICOLON','f_call',4,'p_f_call','little_duck_pars.py',270),
  ('empty -> <empty>','empty',0,'p_empty','little_duck_pars.py',274),
]
