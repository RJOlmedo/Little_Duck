
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocLESSGREATERrightASSIGNleftPLUSMINUSleftTIMESDIVIDEASSIGN COLON COMMA CTE_FLOAT CTE_INT CTE_STRING DIVIDE DO ELSE END FLOAT GREATER ID IF INT LBRACE LESS LPAREN MAIN MINUS NOTEQUAL PLUS PRINT PROGRAM RBRACE RPAREN SEMICOLON TIMES VAR WHILEPrograma : PROGRAM PROGRAM_ID SEMICOLON PRV main_func BODY ENDPROGRAM_ID : IDPRV : VARS\n           | EMPTYVARS : VAR VAR_DECLSVAR_DECLS : VAR_DECL VAR_DECLS\n                 | VAR_DECLVAR_DECL : ID_LIST COLON TYPE SEMICOLONID_LIST : ID COMMA ID_LIST\n               | IDmain_func : MAINBODY : LBRACE STATEMENTS RBRACESTATEMENTS : STATEMENT STATEMENTS\n                  | EMPTYSTATEMENT : assignment\n                 | FCAL\n                 | print_statement\n                 | condition\n                 | cycle\n                 | do_whileassignment : ID ASSIGN Expresion SEMICOLONExpresion : EXP ETET : ETP EXP\n          | EMPTYETP : GREATER\n           | LESS\n           | NOTEQUALEXP : Term EXPPEXPP : PLUS Term EXPP\n            | MINUS Term EXPP\n            | EMPTYTerm : Factor SubTermSubTerm : TIMES Factor SubTerm\n               | DIVIDE Factor SubTerm\n               | EMPTYFactor : LPAREN Expresion RPAREN\n              | Subfactor ID\n              | Subfactor CTESubfactor : EMPTY\n                 | PLUS\n                 | MINUSCTE : CTE_INT\n           | CTE_FLOATTYPE : INT\n            | FLOATFCAL : ID LPAREN FCALP RPAREN SEMICOLONFCALP : Expresion FCALPP\n             | EMPTYFCALPP : COMMA FCALP\n              | EMPTYprint_statement : PRINT LPAREN PRIPRI : Expresion PRIP\n           | CTE_STRING PRIPPRIP : COMMA PRI\n            | RPAREN SEMICOLONcondition : IF LPAREN Expresion RPAREN BODY subconditionsubcondition : ELSE BODY\n                    | EMPTYcycle : WHILE LPAREN Expresion RPAREN BODYdo_while : DO BODY WHILE LPAREN Expresion RPAREN SEMICOLONEMPTY :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,21,],[0,-1,]),'ID':([2,9,13,17,20,23,25,26,27,28,29,30,40,42,43,44,45,46,48,53,54,55,56,57,60,61,67,69,71,72,73,75,76,79,80,89,91,92,94,97,104,106,107,108,109,115,117,119,120,],[4,15,15,31,15,31,-15,-16,-17,-18,-19,-20,-12,-61,-61,-61,-61,-61,-8,-61,83,-39,-40,-41,-39,-51,-21,-61,-25,-26,-27,-61,-61,-61,-61,-61,-52,-61,-53,-61,-46,-54,-55,-61,-59,-56,-58,-57,-60,]),'SEMICOLON':([3,4,36,37,38,49,50,51,52,68,70,74,77,78,81,83,84,85,86,87,93,98,99,100,101,102,103,111,112,113,114,118,],[5,-2,48,-44,-45,67,-61,-61,-61,-22,-24,-28,-31,-32,-35,-37,-38,-42,-43,104,107,-23,-61,-61,-61,-61,-36,-29,-30,-33,-34,120,]),'VAR':([5,],[9,]),'MAIN':([5,6,7,8,12,13,18,48,],[-61,11,-3,-4,-5,-7,-6,-8,]),'LBRACE':([10,11,35,95,96,116,],[17,-11,17,17,17,17,]),'COLON':([14,15,39,],[19,-10,-9,]),'COMMA':([15,50,51,52,59,62,63,68,70,74,77,78,81,83,84,85,86,98,99,100,101,102,103,111,112,113,114,],[20,-61,-61,-61,89,92,92,-22,-24,-28,-31,-32,-35,-37,-38,-42,-43,-23,-61,-61,-61,-61,-36,-29,-30,-33,-34,]),'END':([16,40,],[21,-12,]),'RBRACE':([17,22,23,24,25,26,27,28,29,30,40,41,61,67,91,94,104,106,107,108,109,115,117,119,120,],[-61,40,-61,-14,-15,-16,-17,-18,-19,-20,-12,-13,-51,-21,-52,-53,-46,-54,-55,-61,-59,-56,-58,-57,-60,]),'PRINT':([17,23,25,26,27,28,29,30,40,61,67,91,94,104,106,107,108,109,115,117,119,120,],[32,32,-15,-16,-17,-18,-19,-20,-12,-51,-21,-52,-53,-46,-54,-55,-61,-59,-56,-58,-57,-60,]),'IF':([17,23,25,26,27,28,29,30,40,61,67,91,94,104,106,107,108,109,115,117,119,120,],[33,33,-15,-16,-17,-18,-19,-20,-12,-51,-21,-52,-53,-46,-54,-55,-61,-59,-56,-58,-57,-60,]),'WHILE':([17,23,25,26,27,28,29,30,40,47,61,67,91,94,104,106,107,108,109,115,117,119,120,],[34,34,-15,-16,-17,-18,-19,-20,-12,66,-51,-21,-52,-53,-46,-54,-55,-61,-59,-56,-58,-57,-60,]),'DO':([17,23,25,26,27,28,29,30,40,61,67,91,94,104,106,107,108,109,115,117,119,120,],[35,35,-15,-16,-17,-18,-19,-20,-12,-51,-21,-52,-53,-46,-54,-55,-61,-59,-56,-58,-57,-60,]),'INT':([19,],[37,]),'FLOAT':([19,],[38,]),'ASSIGN':([31,],[42,]),'LPAREN':([31,32,33,34,42,43,44,45,46,53,66,69,71,72,73,75,76,79,80,89,92,97,],[43,44,45,46,53,53,53,53,53,53,97,53,-25,-26,-27,53,53,53,53,53,53,53,]),'ELSE':([40,108,],[-12,116,]),'PLUS':([42,43,44,45,46,51,52,53,69,71,72,73,75,76,78,79,80,81,83,84,85,86,89,92,97,99,100,101,102,103,113,114,],[56,56,56,56,56,75,-61,56,56,-25,-26,-27,56,56,-32,56,56,-35,-37,-38,-42,-43,56,56,56,75,75,-61,-61,-36,-33,-34,]),'MINUS':([42,43,44,45,46,51,52,53,69,71,72,73,75,76,78,79,80,81,83,84,85,86,89,92,97,99,100,101,102,103,113,114,],[57,57,57,57,57,76,-61,57,57,-25,-26,-27,57,57,-32,57,57,-35,-37,-38,-42,-43,57,57,57,76,76,-61,-61,-36,-33,-34,]),'CTE_INT':([42,43,44,45,46,53,54,55,56,57,60,69,71,72,73,75,76,79,80,89,92,97,],[-61,-61,-61,-61,-61,-61,85,-39,-40,-41,-39,-61,-25,-26,-27,-61,-61,-61,-61,-61,-61,-61,]),'CTE_FLOAT':([42,43,44,45,46,53,54,55,56,57,60,69,71,72,73,75,76,79,80,89,92,97,],[-61,-61,-61,-61,-61,-61,86,-39,-40,-41,-39,-61,-25,-26,-27,-61,-61,-61,-61,-61,-61,-61,]),'RPAREN':([43,50,51,52,58,59,60,62,63,64,65,68,70,74,77,78,81,82,83,84,85,86,88,89,90,98,99,100,101,102,103,105,110,111,112,113,114,],[-61,-61,-61,-61,87,-61,-48,93,93,95,96,-22,-24,-28,-31,-32,-35,103,-37,-38,-42,-43,-47,-61,-50,-23,-61,-61,-61,-61,-36,-49,118,-29,-30,-33,-34,]),'CTE_STRING':([44,92,],[63,63,]),'GREATER':([50,51,52,74,77,78,81,83,84,85,86,99,100,101,102,103,111,112,113,114,],[71,-61,-61,-28,-31,-32,-35,-37,-38,-42,-43,-61,-61,-61,-61,-36,-29,-30,-33,-34,]),'LESS':([50,51,52,74,77,78,81,83,84,85,86,99,100,101,102,103,111,112,113,114,],[72,-61,-61,-28,-31,-32,-35,-37,-38,-42,-43,-61,-61,-61,-61,-36,-29,-30,-33,-34,]),'NOTEQUAL':([50,51,52,74,77,78,81,83,84,85,86,99,100,101,102,103,111,112,113,114,],[73,-61,-61,-28,-31,-32,-35,-37,-38,-42,-43,-61,-61,-61,-61,-36,-29,-30,-33,-34,]),'TIMES':([52,83,84,85,86,101,102,103,],[79,-37,-38,-42,-43,79,79,-36,]),'DIVIDE':([52,83,84,85,86,101,102,103,],[80,-37,-38,-42,-43,80,80,-36,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Programa':([0,],[1,]),'PROGRAM_ID':([2,],[3,]),'PRV':([5,],[6,]),'VARS':([5,],[7,]),'EMPTY':([5,17,23,42,43,44,45,46,50,51,52,53,59,69,75,76,79,80,89,92,97,99,100,101,102,108,],[8,24,24,55,60,55,55,55,70,77,81,55,90,55,55,55,55,55,60,55,55,77,77,81,81,117,]),'main_func':([6,],[10,]),'VAR_DECLS':([9,13,],[12,18,]),'VAR_DECL':([9,13,],[13,13,]),'ID_LIST':([9,13,20,],[14,14,39,]),'BODY':([10,35,95,96,116,],[16,47,108,109,119,]),'STATEMENTS':([17,23,],[22,41,]),'STATEMENT':([17,23,],[23,23,]),'assignment':([17,23,],[25,25,]),'FCAL':([17,23,],[26,26,]),'print_statement':([17,23,],[27,27,]),'condition':([17,23,],[28,28,]),'cycle':([17,23,],[29,29,]),'do_while':([17,23,],[30,30,]),'TYPE':([19,],[36,]),'Expresion':([42,43,44,45,46,53,89,92,97,],[49,59,62,64,65,82,59,62,110,]),'EXP':([42,43,44,45,46,53,69,89,92,97,],[50,50,50,50,50,50,98,50,50,50,]),'Term':([42,43,44,45,46,53,69,75,76,89,92,97,],[51,51,51,51,51,51,51,99,100,51,51,51,]),'Factor':([42,43,44,45,46,53,69,75,76,79,80,89,92,97,],[52,52,52,52,52,52,52,52,52,101,102,52,52,52,]),'Subfactor':([42,43,44,45,46,53,69,75,76,79,80,89,92,97,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'FCALP':([43,89,],[58,105,]),'PRI':([44,92,],[61,106,]),'ET':([50,],[68,]),'ETP':([50,],[69,]),'EXPP':([51,99,100,],[74,111,112,]),'SubTerm':([52,101,102,],[78,113,114,]),'CTE':([54,],[84,]),'FCALPP':([59,],[88,]),'PRIP':([62,63,],[91,94,]),'subcondition':([108,],[115,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Programa","S'",1,None,None,None),
  ('Programa -> PROGRAM PROGRAM_ID SEMICOLON PRV main_func BODY END','Programa',7,'p_programa','little_duck_pars.py',19),
  ('PROGRAM_ID -> ID','PROGRAM_ID',1,'p_PROGRAM_ID','little_duck_pars.py',30),
  ('PRV -> VARS','PRV',1,'p_PRV','little_duck_pars.py',38),
  ('PRV -> EMPTY','PRV',1,'p_PRV','little_duck_pars.py',39),
  ('VARS -> VAR VAR_DECLS','VARS',2,'p_VARS','little_duck_pars.py',42),
  ('VAR_DECLS -> VAR_DECL VAR_DECLS','VAR_DECLS',2,'p_VAR_DECLS','little_duck_pars.py',45),
  ('VAR_DECLS -> VAR_DECL','VAR_DECLS',1,'p_VAR_DECLS','little_duck_pars.py',46),
  ('VAR_DECL -> ID_LIST COLON TYPE SEMICOLON','VAR_DECL',4,'p_VAR_DECL','little_duck_pars.py',49),
  ('ID_LIST -> ID COMMA ID_LIST','ID_LIST',3,'p_ID_LIST','little_duck_pars.py',59),
  ('ID_LIST -> ID','ID_LIST',1,'p_ID_LIST','little_duck_pars.py',60),
  ('main_func -> MAIN','main_func',1,'p_main_func','little_duck_pars.py',64),
  ('BODY -> LBRACE STATEMENTS RBRACE','BODY',3,'p_BODY','little_duck_pars.py',67),
  ('STATEMENTS -> STATEMENT STATEMENTS','STATEMENTS',2,'p_STATEMENTS','little_duck_pars.py',70),
  ('STATEMENTS -> EMPTY','STATEMENTS',1,'p_STATEMENTS','little_duck_pars.py',71),
  ('STATEMENT -> assignment','STATEMENT',1,'p_STATEMENT','little_duck_pars.py',74),
  ('STATEMENT -> FCAL','STATEMENT',1,'p_STATEMENT','little_duck_pars.py',75),
  ('STATEMENT -> print_statement','STATEMENT',1,'p_STATEMENT','little_duck_pars.py',76),
  ('STATEMENT -> condition','STATEMENT',1,'p_STATEMENT','little_duck_pars.py',77),
  ('STATEMENT -> cycle','STATEMENT',1,'p_STATEMENT','little_duck_pars.py',78),
  ('STATEMENT -> do_while','STATEMENT',1,'p_STATEMENT','little_duck_pars.py',79),
  ('assignment -> ID ASSIGN Expresion SEMICOLON','assignment',4,'p_assignment','little_duck_pars.py',82),
  ('Expresion -> EXP ET','Expresion',2,'p_Expresion','little_duck_pars.py',85),
  ('ET -> ETP EXP','ET',2,'p_ET','little_duck_pars.py',88),
  ('ET -> EMPTY','ET',1,'p_ET','little_duck_pars.py',89),
  ('ETP -> GREATER','ETP',1,'p_ETP','little_duck_pars.py',92),
  ('ETP -> LESS','ETP',1,'p_ETP','little_duck_pars.py',93),
  ('ETP -> NOTEQUAL','ETP',1,'p_ETP','little_duck_pars.py',94),
  ('EXP -> Term EXPP','EXP',2,'p_EXP','little_duck_pars.py',97),
  ('EXPP -> PLUS Term EXPP','EXPP',3,'p_EXPP','little_duck_pars.py',100),
  ('EXPP -> MINUS Term EXPP','EXPP',3,'p_EXPP','little_duck_pars.py',101),
  ('EXPP -> EMPTY','EXPP',1,'p_EXPP','little_duck_pars.py',102),
  ('Term -> Factor SubTerm','Term',2,'p_term','little_duck_pars.py',105),
  ('SubTerm -> TIMES Factor SubTerm','SubTerm',3,'p_SubTerm','little_duck_pars.py',108),
  ('SubTerm -> DIVIDE Factor SubTerm','SubTerm',3,'p_SubTerm','little_duck_pars.py',109),
  ('SubTerm -> EMPTY','SubTerm',1,'p_SubTerm','little_duck_pars.py',110),
  ('Factor -> LPAREN Expresion RPAREN','Factor',3,'p_Factor','little_duck_pars.py',113),
  ('Factor -> Subfactor ID','Factor',2,'p_Factor','little_duck_pars.py',114),
  ('Factor -> Subfactor CTE','Factor',2,'p_Factor','little_duck_pars.py',115),
  ('Subfactor -> EMPTY','Subfactor',1,'p_Subfactor','little_duck_pars.py',118),
  ('Subfactor -> PLUS','Subfactor',1,'p_Subfactor','little_duck_pars.py',119),
  ('Subfactor -> MINUS','Subfactor',1,'p_Subfactor','little_duck_pars.py',120),
  ('CTE -> CTE_INT','CTE',1,'p_CTE','little_duck_pars.py',123),
  ('CTE -> CTE_FLOAT','CTE',1,'p_CTE','little_duck_pars.py',124),
  ('TYPE -> INT','TYPE',1,'p_TYPE','little_duck_pars.py',128),
  ('TYPE -> FLOAT','TYPE',1,'p_TYPE','little_duck_pars.py',129),
  ('FCAL -> ID LPAREN FCALP RPAREN SEMICOLON','FCAL',5,'p_FCAL','little_duck_pars.py',133),
  ('FCALP -> Expresion FCALPP','FCALP',2,'p_FCALP','little_duck_pars.py',136),
  ('FCALP -> EMPTY','FCALP',1,'p_FCALP','little_duck_pars.py',137),
  ('FCALPP -> COMMA FCALP','FCALPP',2,'p_FCALPP','little_duck_pars.py',140),
  ('FCALPP -> EMPTY','FCALPP',1,'p_FCALPP','little_duck_pars.py',141),
  ('print_statement -> PRINT LPAREN PRI','print_statement',3,'p_print_statement','little_duck_pars.py',144),
  ('PRI -> Expresion PRIP','PRI',2,'p_PRI','little_duck_pars.py',147),
  ('PRI -> CTE_STRING PRIP','PRI',2,'p_PRI','little_duck_pars.py',148),
  ('PRIP -> COMMA PRI','PRIP',2,'p_PRIP','little_duck_pars.py',151),
  ('PRIP -> RPAREN SEMICOLON','PRIP',2,'p_PRIP','little_duck_pars.py',152),
  ('condition -> IF LPAREN Expresion RPAREN BODY subcondition','condition',6,'p_condition','little_duck_pars.py',155),
  ('subcondition -> ELSE BODY','subcondition',2,'p_subcondition','little_duck_pars.py',158),
  ('subcondition -> EMPTY','subcondition',1,'p_subcondition','little_duck_pars.py',159),
  ('cycle -> WHILE LPAREN Expresion RPAREN BODY','cycle',5,'p_cycle','little_duck_pars.py',162),
  ('do_while -> DO BODY WHILE LPAREN Expresion RPAREN SEMICOLON','do_while',7,'p_do_while','little_duck_pars.py',165),
  ('EMPTY -> <empty>','EMPTY',0,'p_EMPTY','little_duck_pars.py',168),
]
