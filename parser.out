Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMI vars funcs main END
Rule 2     vars -> VAR var_declaration vars
Rule 3     vars -> empty
Rule 4     var_declaration -> ID COLON type SEMI
Rule 5     var_declaration -> ID COLON type COMMA var_declaration
Rule 6     type -> INT
Rule 7     type -> FLOAT
Rule 8     type -> STRING
Rule 9     funcs -> VOID ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE funcs
Rule 10    funcs -> empty
Rule 11    parameter_list -> parameter COMMA parameter_list
Rule 12    parameter_list -> parameter
Rule 13    parameter_list -> empty
Rule 14    parameter -> ID COLON type
Rule 15    main -> MAIN LBRACE statement_list RBRACE
Rule 16    statement_list -> statement_list statement
Rule 17    statement_list -> statement
Rule 18    statement -> assign
Rule 19    statement -> condition
Rule 20    statement -> cycle
Rule 21    statement -> print_statement
Rule 22    statement -> f_call
Rule 23    assign -> ID ASSIGN expression SEMI
Rule 24    condition -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE else_part
Rule 25    else_part -> ELSE LBRACE statement_list RBRACE
Rule 26    else_part -> empty
Rule 27    cycle -> WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE
Rule 28    cycle -> DO LBRACE statement_list RBRACE WHILE LPAREN expression RPAREN SEMI
Rule 29    print_statement -> PRINT LPAREN expression RPAREN SEMI
Rule 30    f_call -> ID LPAREN arg_list RPAREN SEMI
Rule 31    f_call -> ID LPAREN RPAREN SEMI
Rule 32    arg_list -> expression COMMA arg_list
Rule 33    arg_list -> expression
Rule 34    expression -> expression PLUS expression
Rule 35    expression -> expression MINUS expression
Rule 36    expression -> expression MUL expression
Rule 37    expression -> expression DIV expression
Rule 38    expression -> term
Rule 39    term -> factor
Rule 40    term -> factor LT factor
Rule 41    term -> factor GT factor
Rule 42    term -> factor EQ factor
Rule 43    term -> factor NE factor
Rule 44    factor -> LPAREN expression RPAREN
Rule 45    factor -> ID
Rule 46    factor -> CTE_INT
Rule 47    factor -> CTE_FLOAT
Rule 48    factor -> CTE_STRING
Rule 49    empty -> <empty>

Terminals, with rules where they appear

ASSIGN               : 23
COLON                : 4 5 14
COMMA                : 5 11 32
CTE_FLOAT            : 47
CTE_INT              : 46
CTE_STRING           : 48
DIV                  : 37
DO                   : 28
ELSE                 : 25
END                  : 1
EQ                   : 42
FLOAT                : 7
GT                   : 41
ID                   : 1 4 5 9 14 23 30 31 45
IF                   : 24
INT                  : 6
LBRACE               : 9 15 24 25 27 28
LPAREN               : 9 24 27 28 29 30 31 44
LT                   : 40
MAIN                 : 15
MINUS                : 35
MUL                  : 36
NE                   : 43
PLUS                 : 34
PRINT                : 29
PROGRAM              : 1
RBRACE               : 9 15 24 25 27 28
RPAREN               : 9 24 27 28 29 30 31 44
SEMI                 : 1 4 23 28 29 30 31
STRING               : 8
VAR                  : 2
VOID                 : 9
WHILE                : 27 28
error                : 

Nonterminals, with rules where they appear

arg_list             : 30 32
assign               : 18
condition            : 19
cycle                : 20
else_part            : 24
empty                : 3 10 13 26
expression           : 23 24 27 28 29 32 33 34 34 35 35 36 36 37 37 44
f_call               : 22
factor               : 39 40 40 41 41 42 42 43 43
funcs                : 1 9
main                 : 1
parameter            : 11 12
parameter_list       : 9 11
print_statement      : 21
program              : 0
statement            : 16 17
statement_list       : 9 15 16 24 25 27 28
term                 : 38
type                 : 4 5 14
var_declaration      : 2 5
vars                 : 1 2

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMI vars funcs main END

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMI vars funcs main END

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMI vars funcs main END

    SEMI            shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMI . vars funcs main END
    (2) vars -> . VAR var_declaration vars
    (3) vars -> . empty
    (49) empty -> .

    VAR             shift and go to state 6
    VOID            reduce using rule 49 (empty -> .)
    MAIN            reduce using rule 49 (empty -> .)

    vars                           shift and go to state 5
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM ID SEMI vars . funcs main END
    (9) funcs -> . VOID ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE funcs
    (10) funcs -> . empty
    (49) empty -> .

    VOID            shift and go to state 9
    MAIN            reduce using rule 49 (empty -> .)

    funcs                          shift and go to state 8
    empty                          shift and go to state 10

state 6

    (2) vars -> VAR . var_declaration vars
    (4) var_declaration -> . ID COLON type SEMI
    (5) var_declaration -> . ID COLON type COMMA var_declaration

    ID              shift and go to state 12

    var_declaration                shift and go to state 11

state 7

    (3) vars -> empty .

    VOID            reduce using rule 3 (vars -> empty .)
    MAIN            reduce using rule 3 (vars -> empty .)


state 8

    (1) program -> PROGRAM ID SEMI vars funcs . main END
    (15) main -> . MAIN LBRACE statement_list RBRACE

    MAIN            shift and go to state 14

    main                           shift and go to state 13

state 9

    (9) funcs -> VOID . ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE funcs

    ID              shift and go to state 15


state 10

    (10) funcs -> empty .

    MAIN            reduce using rule 10 (funcs -> empty .)


state 11

    (2) vars -> VAR var_declaration . vars
    (2) vars -> . VAR var_declaration vars
    (3) vars -> . empty
    (49) empty -> .

    VAR             shift and go to state 6
    VOID            reduce using rule 49 (empty -> .)
    MAIN            reduce using rule 49 (empty -> .)

    vars                           shift and go to state 16
    empty                          shift and go to state 7

state 12

    (4) var_declaration -> ID . COLON type SEMI
    (5) var_declaration -> ID . COLON type COMMA var_declaration

    COLON           shift and go to state 17


state 13

    (1) program -> PROGRAM ID SEMI vars funcs main . END

    END             shift and go to state 18


state 14

    (15) main -> MAIN . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 19


state 15

    (9) funcs -> VOID ID . LPAREN parameter_list RPAREN LBRACE statement_list RBRACE funcs

    LPAREN          shift and go to state 20


state 16

    (2) vars -> VAR var_declaration vars .

    VOID            reduce using rule 2 (vars -> VAR var_declaration vars .)
    MAIN            reduce using rule 2 (vars -> VAR var_declaration vars .)


state 17

    (4) var_declaration -> ID COLON . type SEMI
    (5) var_declaration -> ID COLON . type COMMA var_declaration
    (6) type -> . INT
    (7) type -> . FLOAT
    (8) type -> . STRING

    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 24

    type                           shift and go to state 21

state 18

    (1) program -> PROGRAM ID SEMI vars funcs main END .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMI vars funcs main END .)


state 19

    (15) main -> MAIN LBRACE . statement_list RBRACE
    (16) statement_list -> . statement_list statement
    (17) statement_list -> . statement
    (18) statement -> . assign
    (19) statement -> . condition
    (20) statement -> . cycle
    (21) statement -> . print_statement
    (22) statement -> . f_call
    (23) assign -> . ID ASSIGN expression SEMI
    (24) condition -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE else_part
    (27) cycle -> . WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) cycle -> . DO LBRACE statement_list RBRACE WHILE LPAREN expression RPAREN SEMI
    (29) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (30) f_call -> . ID LPAREN arg_list RPAREN SEMI
    (31) f_call -> . ID LPAREN RPAREN SEMI

    ID              shift and go to state 32
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    PRINT           shift and go to state 36

    statement_list                 shift and go to state 25
    statement                      shift and go to state 26
    assign                         shift and go to state 27
    condition                      shift and go to state 28
    cycle                          shift and go to state 29
    print_statement                shift and go to state 30
    f_call                         shift and go to state 31

state 20

    (9) funcs -> VOID ID LPAREN . parameter_list RPAREN LBRACE statement_list RBRACE funcs
    (11) parameter_list -> . parameter COMMA parameter_list
    (12) parameter_list -> . parameter
    (13) parameter_list -> . empty
    (14) parameter -> . ID COLON type
    (49) empty -> .

    ID              shift and go to state 37
    RPAREN          reduce using rule 49 (empty -> .)

    parameter_list                 shift and go to state 38
    parameter                      shift and go to state 39
    empty                          shift and go to state 40

state 21

    (4) var_declaration -> ID COLON type . SEMI
    (5) var_declaration -> ID COLON type . COMMA var_declaration

    SEMI            shift and go to state 41
    COMMA           shift and go to state 42


state 22

    (6) type -> INT .

    SEMI            reduce using rule 6 (type -> INT .)
    COMMA           reduce using rule 6 (type -> INT .)
    RPAREN          reduce using rule 6 (type -> INT .)


state 23

    (7) type -> FLOAT .

    SEMI            reduce using rule 7 (type -> FLOAT .)
    COMMA           reduce using rule 7 (type -> FLOAT .)
    RPAREN          reduce using rule 7 (type -> FLOAT .)


state 24

    (8) type -> STRING .

    SEMI            reduce using rule 8 (type -> STRING .)
    COMMA           reduce using rule 8 (type -> STRING .)
    RPAREN          reduce using rule 8 (type -> STRING .)


state 25

    (15) main -> MAIN LBRACE statement_list . RBRACE
    (16) statement_list -> statement_list . statement
    (18) statement -> . assign
    (19) statement -> . condition
    (20) statement -> . cycle
    (21) statement -> . print_statement
    (22) statement -> . f_call
    (23) assign -> . ID ASSIGN expression SEMI
    (24) condition -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE else_part
    (27) cycle -> . WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) cycle -> . DO LBRACE statement_list RBRACE WHILE LPAREN expression RPAREN SEMI
    (29) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (30) f_call -> . ID LPAREN arg_list RPAREN SEMI
    (31) f_call -> . ID LPAREN RPAREN SEMI

    RBRACE          shift and go to state 43
    ID              shift and go to state 32
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    PRINT           shift and go to state 36

    statement                      shift and go to state 44
    assign                         shift and go to state 27
    condition                      shift and go to state 28
    cycle                          shift and go to state 29
    print_statement                shift and go to state 30
    f_call                         shift and go to state 31

state 26

    (17) statement_list -> statement .

    RBRACE          reduce using rule 17 (statement_list -> statement .)
    ID              reduce using rule 17 (statement_list -> statement .)
    IF              reduce using rule 17 (statement_list -> statement .)
    WHILE           reduce using rule 17 (statement_list -> statement .)
    DO              reduce using rule 17 (statement_list -> statement .)
    PRINT           reduce using rule 17 (statement_list -> statement .)


state 27

    (18) statement -> assign .

    RBRACE          reduce using rule 18 (statement -> assign .)
    ID              reduce using rule 18 (statement -> assign .)
    IF              reduce using rule 18 (statement -> assign .)
    WHILE           reduce using rule 18 (statement -> assign .)
    DO              reduce using rule 18 (statement -> assign .)
    PRINT           reduce using rule 18 (statement -> assign .)


state 28

    (19) statement -> condition .

    RBRACE          reduce using rule 19 (statement -> condition .)
    ID              reduce using rule 19 (statement -> condition .)
    IF              reduce using rule 19 (statement -> condition .)
    WHILE           reduce using rule 19 (statement -> condition .)
    DO              reduce using rule 19 (statement -> condition .)
    PRINT           reduce using rule 19 (statement -> condition .)


state 29

    (20) statement -> cycle .

    RBRACE          reduce using rule 20 (statement -> cycle .)
    ID              reduce using rule 20 (statement -> cycle .)
    IF              reduce using rule 20 (statement -> cycle .)
    WHILE           reduce using rule 20 (statement -> cycle .)
    DO              reduce using rule 20 (statement -> cycle .)
    PRINT           reduce using rule 20 (statement -> cycle .)


state 30

    (21) statement -> print_statement .

    RBRACE          reduce using rule 21 (statement -> print_statement .)
    ID              reduce using rule 21 (statement -> print_statement .)
    IF              reduce using rule 21 (statement -> print_statement .)
    WHILE           reduce using rule 21 (statement -> print_statement .)
    DO              reduce using rule 21 (statement -> print_statement .)
    PRINT           reduce using rule 21 (statement -> print_statement .)


state 31

    (22) statement -> f_call .

    RBRACE          reduce using rule 22 (statement -> f_call .)
    ID              reduce using rule 22 (statement -> f_call .)
    IF              reduce using rule 22 (statement -> f_call .)
    WHILE           reduce using rule 22 (statement -> f_call .)
    DO              reduce using rule 22 (statement -> f_call .)
    PRINT           reduce using rule 22 (statement -> f_call .)


state 32

    (23) assign -> ID . ASSIGN expression SEMI
    (30) f_call -> ID . LPAREN arg_list RPAREN SEMI
    (31) f_call -> ID . LPAREN RPAREN SEMI

    ASSIGN          shift and go to state 45
    LPAREN          shift and go to state 46


state 33

    (24) condition -> IF . LPAREN expression RPAREN LBRACE statement_list RBRACE else_part

    LPAREN          shift and go to state 47


state 34

    (27) cycle -> WHILE . LPAREN expression RPAREN LBRACE statement_list RBRACE

    LPAREN          shift and go to state 48


state 35

    (28) cycle -> DO . LBRACE statement_list RBRACE WHILE LPAREN expression RPAREN SEMI

    LBRACE          shift and go to state 49


state 36

    (29) print_statement -> PRINT . LPAREN expression RPAREN SEMI

    LPAREN          shift and go to state 50


state 37

    (14) parameter -> ID . COLON type

    COLON           shift and go to state 51


state 38

    (9) funcs -> VOID ID LPAREN parameter_list . RPAREN LBRACE statement_list RBRACE funcs

    RPAREN          shift and go to state 52


state 39

    (11) parameter_list -> parameter . COMMA parameter_list
    (12) parameter_list -> parameter .

    COMMA           shift and go to state 53
    RPAREN          reduce using rule 12 (parameter_list -> parameter .)


state 40

    (13) parameter_list -> empty .

    RPAREN          reduce using rule 13 (parameter_list -> empty .)


state 41

    (4) var_declaration -> ID COLON type SEMI .

    VAR             reduce using rule 4 (var_declaration -> ID COLON type SEMI .)
    VOID            reduce using rule 4 (var_declaration -> ID COLON type SEMI .)
    MAIN            reduce using rule 4 (var_declaration -> ID COLON type SEMI .)


state 42

    (5) var_declaration -> ID COLON type COMMA . var_declaration
    (4) var_declaration -> . ID COLON type SEMI
    (5) var_declaration -> . ID COLON type COMMA var_declaration

    ID              shift and go to state 12

    var_declaration                shift and go to state 54

state 43

    (15) main -> MAIN LBRACE statement_list RBRACE .

    END             reduce using rule 15 (main -> MAIN LBRACE statement_list RBRACE .)


state 44

    (16) statement_list -> statement_list statement .

    RBRACE          reduce using rule 16 (statement_list -> statement_list statement .)
    ID              reduce using rule 16 (statement_list -> statement_list statement .)
    IF              reduce using rule 16 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 16 (statement_list -> statement_list statement .)
    DO              reduce using rule 16 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 16 (statement_list -> statement_list statement .)


state 45

    (23) assign -> ID ASSIGN . expression SEMI
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MUL expression
    (37) expression -> . expression DIV expression
    (38) expression -> . term
    (39) term -> . factor
    (40) term -> . factor LT factor
    (41) term -> . factor GT factor
    (42) term -> . factor EQ factor
    (43) term -> . factor NE factor
    (44) factor -> . LPAREN expression RPAREN
    (45) factor -> . ID
    (46) factor -> . CTE_INT
    (47) factor -> . CTE_FLOAT
    (48) factor -> . CTE_STRING

    LPAREN          shift and go to state 59
    ID              shift and go to state 55
    CTE_INT         shift and go to state 60
    CTE_FLOAT       shift and go to state 61
    CTE_STRING      shift and go to state 62

    expression                     shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58

state 46

    (30) f_call -> ID LPAREN . arg_list RPAREN SEMI
    (31) f_call -> ID LPAREN . RPAREN SEMI
    (32) arg_list -> . expression COMMA arg_list
    (33) arg_list -> . expression
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MUL expression
    (37) expression -> . expression DIV expression
    (38) expression -> . term
    (39) term -> . factor
    (40) term -> . factor LT factor
    (41) term -> . factor GT factor
    (42) term -> . factor EQ factor
    (43) term -> . factor NE factor
    (44) factor -> . LPAREN expression RPAREN
    (45) factor -> . ID
    (46) factor -> . CTE_INT
    (47) factor -> . CTE_FLOAT
    (48) factor -> . CTE_STRING

    RPAREN          shift and go to state 64
    LPAREN          shift and go to state 59
    ID              shift and go to state 55
    CTE_INT         shift and go to state 60
    CTE_FLOAT       shift and go to state 61
    CTE_STRING      shift and go to state 62

    arg_list                       shift and go to state 63
    expression                     shift and go to state 65
    term                           shift and go to state 57
    factor                         shift and go to state 58

state 47

    (24) condition -> IF LPAREN . expression RPAREN LBRACE statement_list RBRACE else_part
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MUL expression
    (37) expression -> . expression DIV expression
    (38) expression -> . term
    (39) term -> . factor
    (40) term -> . factor LT factor
    (41) term -> . factor GT factor
    (42) term -> . factor EQ factor
    (43) term -> . factor NE factor
    (44) factor -> . LPAREN expression RPAREN
    (45) factor -> . ID
    (46) factor -> . CTE_INT
    (47) factor -> . CTE_FLOAT
    (48) factor -> . CTE_STRING

    LPAREN          shift and go to state 59
    ID              shift and go to state 55
    CTE_INT         shift and go to state 60
    CTE_FLOAT       shift and go to state 61
    CTE_STRING      shift and go to state 62

    expression                     shift and go to state 66
    term                           shift and go to state 57
    factor                         shift and go to state 58

state 48

    (27) cycle -> WHILE LPAREN . expression RPAREN LBRACE statement_list RBRACE
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MUL expression
    (37) expression -> . expression DIV expression
    (38) expression -> . term
    (39) term -> . factor
    (40) term -> . factor LT factor
    (41) term -> . factor GT factor
    (42) term -> . factor EQ factor
    (43) term -> . factor NE factor
    (44) factor -> . LPAREN expression RPAREN
    (45) factor -> . ID
    (46) factor -> . CTE_INT
    (47) factor -> . CTE_FLOAT
    (48) factor -> . CTE_STRING

    LPAREN          shift and go to state 59
    ID              shift and go to state 55
    CTE_INT         shift and go to state 60
    CTE_FLOAT       shift and go to state 61
    CTE_STRING      shift and go to state 62

    expression                     shift and go to state 67
    term                           shift and go to state 57
    factor                         shift and go to state 58

state 49

    (28) cycle -> DO LBRACE . statement_list RBRACE WHILE LPAREN expression RPAREN SEMI
    (16) statement_list -> . statement_list statement
    (17) statement_list -> . statement
    (18) statement -> . assign
    (19) statement -> . condition
    (20) statement -> . cycle
    (21) statement -> . print_statement
    (22) statement -> . f_call
    (23) assign -> . ID ASSIGN expression SEMI
    (24) condition -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE else_part
    (27) cycle -> . WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) cycle -> . DO LBRACE statement_list RBRACE WHILE LPAREN expression RPAREN SEMI
    (29) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (30) f_call -> . ID LPAREN arg_list RPAREN SEMI
    (31) f_call -> . ID LPAREN RPAREN SEMI

    ID              shift and go to state 32
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    PRINT           shift and go to state 36

    statement_list                 shift and go to state 68
    statement                      shift and go to state 26
    assign                         shift and go to state 27
    condition                      shift and go to state 28
    cycle                          shift and go to state 29
    print_statement                shift and go to state 30
    f_call                         shift and go to state 31

state 50

    (29) print_statement -> PRINT LPAREN . expression RPAREN SEMI
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MUL expression
    (37) expression -> . expression DIV expression
    (38) expression -> . term
    (39) term -> . factor
    (40) term -> . factor LT factor
    (41) term -> . factor GT factor
    (42) term -> . factor EQ factor
    (43) term -> . factor NE factor
    (44) factor -> . LPAREN expression RPAREN
    (45) factor -> . ID
    (46) factor -> . CTE_INT
    (47) factor -> . CTE_FLOAT
    (48) factor -> . CTE_STRING

    LPAREN          shift and go to state 59
    ID              shift and go to state 55
    CTE_INT         shift and go to state 60
    CTE_FLOAT       shift and go to state 61
    CTE_STRING      shift and go to state 62

    expression                     shift and go to state 69
    term                           shift and go to state 57
    factor                         shift and go to state 58

state 51

    (14) parameter -> ID COLON . type
    (6) type -> . INT
    (7) type -> . FLOAT
    (8) type -> . STRING

    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 24

    type                           shift and go to state 70

state 52

    (9) funcs -> VOID ID LPAREN parameter_list RPAREN . LBRACE statement_list RBRACE funcs

    LBRACE          shift and go to state 71


state 53

    (11) parameter_list -> parameter COMMA . parameter_list
    (11) parameter_list -> . parameter COMMA parameter_list
    (12) parameter_list -> . parameter
    (13) parameter_list -> . empty
    (14) parameter -> . ID COLON type
    (49) empty -> .

    ID              shift and go to state 37
    RPAREN          reduce using rule 49 (empty -> .)

    parameter                      shift and go to state 39
    parameter_list                 shift and go to state 72
    empty                          shift and go to state 40

state 54

    (5) var_declaration -> ID COLON type COMMA var_declaration .

    VAR             reduce using rule 5 (var_declaration -> ID COLON type COMMA var_declaration .)
    VOID            reduce using rule 5 (var_declaration -> ID COLON type COMMA var_declaration .)
    MAIN            reduce using rule 5 (var_declaration -> ID COLON type COMMA var_declaration .)


state 55

    (45) factor -> ID .

    LT              reduce using rule 45 (factor -> ID .)
    GT              reduce using rule 45 (factor -> ID .)
    EQ              reduce using rule 45 (factor -> ID .)
    NE              reduce using rule 45 (factor -> ID .)
    SEMI            reduce using rule 45 (factor -> ID .)
    PLUS            reduce using rule 45 (factor -> ID .)
    MINUS           reduce using rule 45 (factor -> ID .)
    MUL             reduce using rule 45 (factor -> ID .)
    DIV             reduce using rule 45 (factor -> ID .)
    COMMA           reduce using rule 45 (factor -> ID .)
    RPAREN          reduce using rule 45 (factor -> ID .)


state 56

    (23) assign -> ID ASSIGN expression . SEMI
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . MUL expression
    (37) expression -> expression . DIV expression

    SEMI            shift and go to state 73
    PLUS            shift and go to state 74
    MINUS           shift and go to state 75
    MUL             shift and go to state 76
    DIV             shift and go to state 77


state 57

    (38) expression -> term .

    SEMI            reduce using rule 38 (expression -> term .)
    PLUS            reduce using rule 38 (expression -> term .)
    MINUS           reduce using rule 38 (expression -> term .)
    MUL             reduce using rule 38 (expression -> term .)
    DIV             reduce using rule 38 (expression -> term .)
    COMMA           reduce using rule 38 (expression -> term .)
    RPAREN          reduce using rule 38 (expression -> term .)


state 58

    (39) term -> factor .
    (40) term -> factor . LT factor
    (41) term -> factor . GT factor
    (42) term -> factor . EQ factor
    (43) term -> factor . NE factor

    SEMI            reduce using rule 39 (term -> factor .)
    PLUS            reduce using rule 39 (term -> factor .)
    MINUS           reduce using rule 39 (term -> factor .)
    MUL             reduce using rule 39 (term -> factor .)
    DIV             reduce using rule 39 (term -> factor .)
    COMMA           reduce using rule 39 (term -> factor .)
    RPAREN          reduce using rule 39 (term -> factor .)
    LT              shift and go to state 78
    GT              shift and go to state 79
    EQ              shift and go to state 80
    NE              shift and go to state 81


state 59

    (44) factor -> LPAREN . expression RPAREN
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MUL expression
    (37) expression -> . expression DIV expression
    (38) expression -> . term
    (39) term -> . factor
    (40) term -> . factor LT factor
    (41) term -> . factor GT factor
    (42) term -> . factor EQ factor
    (43) term -> . factor NE factor
    (44) factor -> . LPAREN expression RPAREN
    (45) factor -> . ID
    (46) factor -> . CTE_INT
    (47) factor -> . CTE_FLOAT
    (48) factor -> . CTE_STRING

    LPAREN          shift and go to state 59
    ID              shift and go to state 55
    CTE_INT         shift and go to state 60
    CTE_FLOAT       shift and go to state 61
    CTE_STRING      shift and go to state 62

    expression                     shift and go to state 82
    term                           shift and go to state 57
    factor                         shift and go to state 58

state 60

    (46) factor -> CTE_INT .

    LT              reduce using rule 46 (factor -> CTE_INT .)
    GT              reduce using rule 46 (factor -> CTE_INT .)
    EQ              reduce using rule 46 (factor -> CTE_INT .)
    NE              reduce using rule 46 (factor -> CTE_INT .)
    SEMI            reduce using rule 46 (factor -> CTE_INT .)
    PLUS            reduce using rule 46 (factor -> CTE_INT .)
    MINUS           reduce using rule 46 (factor -> CTE_INT .)
    MUL             reduce using rule 46 (factor -> CTE_INT .)
    DIV             reduce using rule 46 (factor -> CTE_INT .)
    COMMA           reduce using rule 46 (factor -> CTE_INT .)
    RPAREN          reduce using rule 46 (factor -> CTE_INT .)


state 61

    (47) factor -> CTE_FLOAT .

    LT              reduce using rule 47 (factor -> CTE_FLOAT .)
    GT              reduce using rule 47 (factor -> CTE_FLOAT .)
    EQ              reduce using rule 47 (factor -> CTE_FLOAT .)
    NE              reduce using rule 47 (factor -> CTE_FLOAT .)
    SEMI            reduce using rule 47 (factor -> CTE_FLOAT .)
    PLUS            reduce using rule 47 (factor -> CTE_FLOAT .)
    MINUS           reduce using rule 47 (factor -> CTE_FLOAT .)
    MUL             reduce using rule 47 (factor -> CTE_FLOAT .)
    DIV             reduce using rule 47 (factor -> CTE_FLOAT .)
    COMMA           reduce using rule 47 (factor -> CTE_FLOAT .)
    RPAREN          reduce using rule 47 (factor -> CTE_FLOAT .)


state 62

    (48) factor -> CTE_STRING .

    LT              reduce using rule 48 (factor -> CTE_STRING .)
    GT              reduce using rule 48 (factor -> CTE_STRING .)
    EQ              reduce using rule 48 (factor -> CTE_STRING .)
    NE              reduce using rule 48 (factor -> CTE_STRING .)
    SEMI            reduce using rule 48 (factor -> CTE_STRING .)
    PLUS            reduce using rule 48 (factor -> CTE_STRING .)
    MINUS           reduce using rule 48 (factor -> CTE_STRING .)
    MUL             reduce using rule 48 (factor -> CTE_STRING .)
    DIV             reduce using rule 48 (factor -> CTE_STRING .)
    COMMA           reduce using rule 48 (factor -> CTE_STRING .)
    RPAREN          reduce using rule 48 (factor -> CTE_STRING .)


state 63

    (30) f_call -> ID LPAREN arg_list . RPAREN SEMI

    RPAREN          shift and go to state 83


state 64

    (31) f_call -> ID LPAREN RPAREN . SEMI

    SEMI            shift and go to state 84


state 65

    (32) arg_list -> expression . COMMA arg_list
    (33) arg_list -> expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . MUL expression
    (37) expression -> expression . DIV expression

    COMMA           shift and go to state 85
    RPAREN          reduce using rule 33 (arg_list -> expression .)
    PLUS            shift and go to state 74
    MINUS           shift and go to state 75
    MUL             shift and go to state 76
    DIV             shift and go to state 77


state 66

    (24) condition -> IF LPAREN expression . RPAREN LBRACE statement_list RBRACE else_part
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . MUL expression
    (37) expression -> expression . DIV expression

    RPAREN          shift and go to state 86
    PLUS            shift and go to state 74
    MINUS           shift and go to state 75
    MUL             shift and go to state 76
    DIV             shift and go to state 77


state 67

    (27) cycle -> WHILE LPAREN expression . RPAREN LBRACE statement_list RBRACE
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . MUL expression
    (37) expression -> expression . DIV expression

    RPAREN          shift and go to state 87
    PLUS            shift and go to state 74
    MINUS           shift and go to state 75
    MUL             shift and go to state 76
    DIV             shift and go to state 77


state 68

    (28) cycle -> DO LBRACE statement_list . RBRACE WHILE LPAREN expression RPAREN SEMI
    (16) statement_list -> statement_list . statement
    (18) statement -> . assign
    (19) statement -> . condition
    (20) statement -> . cycle
    (21) statement -> . print_statement
    (22) statement -> . f_call
    (23) assign -> . ID ASSIGN expression SEMI
    (24) condition -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE else_part
    (27) cycle -> . WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) cycle -> . DO LBRACE statement_list RBRACE WHILE LPAREN expression RPAREN SEMI
    (29) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (30) f_call -> . ID LPAREN arg_list RPAREN SEMI
    (31) f_call -> . ID LPAREN RPAREN SEMI

    RBRACE          shift and go to state 88
    ID              shift and go to state 32
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    PRINT           shift and go to state 36

    statement                      shift and go to state 44
    assign                         shift and go to state 27
    condition                      shift and go to state 28
    cycle                          shift and go to state 29
    print_statement                shift and go to state 30
    f_call                         shift and go to state 31

state 69

    (29) print_statement -> PRINT LPAREN expression . RPAREN SEMI
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . MUL expression
    (37) expression -> expression . DIV expression

    RPAREN          shift and go to state 89
    PLUS            shift and go to state 74
    MINUS           shift and go to state 75
    MUL             shift and go to state 76
    DIV             shift and go to state 77


state 70

    (14) parameter -> ID COLON type .

    COMMA           reduce using rule 14 (parameter -> ID COLON type .)
    RPAREN          reduce using rule 14 (parameter -> ID COLON type .)


state 71

    (9) funcs -> VOID ID LPAREN parameter_list RPAREN LBRACE . statement_list RBRACE funcs
    (16) statement_list -> . statement_list statement
    (17) statement_list -> . statement
    (18) statement -> . assign
    (19) statement -> . condition
    (20) statement -> . cycle
    (21) statement -> . print_statement
    (22) statement -> . f_call
    (23) assign -> . ID ASSIGN expression SEMI
    (24) condition -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE else_part
    (27) cycle -> . WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) cycle -> . DO LBRACE statement_list RBRACE WHILE LPAREN expression RPAREN SEMI
    (29) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (30) f_call -> . ID LPAREN arg_list RPAREN SEMI
    (31) f_call -> . ID LPAREN RPAREN SEMI

    ID              shift and go to state 32
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    PRINT           shift and go to state 36

    statement_list                 shift and go to state 90
    statement                      shift and go to state 26
    assign                         shift and go to state 27
    condition                      shift and go to state 28
    cycle                          shift and go to state 29
    print_statement                shift and go to state 30
    f_call                         shift and go to state 31

state 72

    (11) parameter_list -> parameter COMMA parameter_list .

    RPAREN          reduce using rule 11 (parameter_list -> parameter COMMA parameter_list .)


state 73

    (23) assign -> ID ASSIGN expression SEMI .

    RBRACE          reduce using rule 23 (assign -> ID ASSIGN expression SEMI .)
    ID              reduce using rule 23 (assign -> ID ASSIGN expression SEMI .)
    IF              reduce using rule 23 (assign -> ID ASSIGN expression SEMI .)
    WHILE           reduce using rule 23 (assign -> ID ASSIGN expression SEMI .)
    DO              reduce using rule 23 (assign -> ID ASSIGN expression SEMI .)
    PRINT           reduce using rule 23 (assign -> ID ASSIGN expression SEMI .)


state 74

    (34) expression -> expression PLUS . expression
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MUL expression
    (37) expression -> . expression DIV expression
    (38) expression -> . term
    (39) term -> . factor
    (40) term -> . factor LT factor
    (41) term -> . factor GT factor
    (42) term -> . factor EQ factor
    (43) term -> . factor NE factor
    (44) factor -> . LPAREN expression RPAREN
    (45) factor -> . ID
    (46) factor -> . CTE_INT
    (47) factor -> . CTE_FLOAT
    (48) factor -> . CTE_STRING

    LPAREN          shift and go to state 59
    ID              shift and go to state 55
    CTE_INT         shift and go to state 60
    CTE_FLOAT       shift and go to state 61
    CTE_STRING      shift and go to state 62

    expression                     shift and go to state 91
    term                           shift and go to state 57
    factor                         shift and go to state 58

state 75

    (35) expression -> expression MINUS . expression
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MUL expression
    (37) expression -> . expression DIV expression
    (38) expression -> . term
    (39) term -> . factor
    (40) term -> . factor LT factor
    (41) term -> . factor GT factor
    (42) term -> . factor EQ factor
    (43) term -> . factor NE factor
    (44) factor -> . LPAREN expression RPAREN
    (45) factor -> . ID
    (46) factor -> . CTE_INT
    (47) factor -> . CTE_FLOAT
    (48) factor -> . CTE_STRING

    LPAREN          shift and go to state 59
    ID              shift and go to state 55
    CTE_INT         shift and go to state 60
    CTE_FLOAT       shift and go to state 61
    CTE_STRING      shift and go to state 62

    expression                     shift and go to state 92
    term                           shift and go to state 57
    factor                         shift and go to state 58

state 76

    (36) expression -> expression MUL . expression
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MUL expression
    (37) expression -> . expression DIV expression
    (38) expression -> . term
    (39) term -> . factor
    (40) term -> . factor LT factor
    (41) term -> . factor GT factor
    (42) term -> . factor EQ factor
    (43) term -> . factor NE factor
    (44) factor -> . LPAREN expression RPAREN
    (45) factor -> . ID
    (46) factor -> . CTE_INT
    (47) factor -> . CTE_FLOAT
    (48) factor -> . CTE_STRING

    LPAREN          shift and go to state 59
    ID              shift and go to state 55
    CTE_INT         shift and go to state 60
    CTE_FLOAT       shift and go to state 61
    CTE_STRING      shift and go to state 62

    expression                     shift and go to state 93
    term                           shift and go to state 57
    factor                         shift and go to state 58

state 77

    (37) expression -> expression DIV . expression
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MUL expression
    (37) expression -> . expression DIV expression
    (38) expression -> . term
    (39) term -> . factor
    (40) term -> . factor LT factor
    (41) term -> . factor GT factor
    (42) term -> . factor EQ factor
    (43) term -> . factor NE factor
    (44) factor -> . LPAREN expression RPAREN
    (45) factor -> . ID
    (46) factor -> . CTE_INT
    (47) factor -> . CTE_FLOAT
    (48) factor -> . CTE_STRING

    LPAREN          shift and go to state 59
    ID              shift and go to state 55
    CTE_INT         shift and go to state 60
    CTE_FLOAT       shift and go to state 61
    CTE_STRING      shift and go to state 62

    expression                     shift and go to state 94
    term                           shift and go to state 57
    factor                         shift and go to state 58

state 78

    (40) term -> factor LT . factor
    (44) factor -> . LPAREN expression RPAREN
    (45) factor -> . ID
    (46) factor -> . CTE_INT
    (47) factor -> . CTE_FLOAT
    (48) factor -> . CTE_STRING

    LPAREN          shift and go to state 59
    ID              shift and go to state 55
    CTE_INT         shift and go to state 60
    CTE_FLOAT       shift and go to state 61
    CTE_STRING      shift and go to state 62

    factor                         shift and go to state 95

state 79

    (41) term -> factor GT . factor
    (44) factor -> . LPAREN expression RPAREN
    (45) factor -> . ID
    (46) factor -> . CTE_INT
    (47) factor -> . CTE_FLOAT
    (48) factor -> . CTE_STRING

    LPAREN          shift and go to state 59
    ID              shift and go to state 55
    CTE_INT         shift and go to state 60
    CTE_FLOAT       shift and go to state 61
    CTE_STRING      shift and go to state 62

    factor                         shift and go to state 96

state 80

    (42) term -> factor EQ . factor
    (44) factor -> . LPAREN expression RPAREN
    (45) factor -> . ID
    (46) factor -> . CTE_INT
    (47) factor -> . CTE_FLOAT
    (48) factor -> . CTE_STRING

    LPAREN          shift and go to state 59
    ID              shift and go to state 55
    CTE_INT         shift and go to state 60
    CTE_FLOAT       shift and go to state 61
    CTE_STRING      shift and go to state 62

    factor                         shift and go to state 97

state 81

    (43) term -> factor NE . factor
    (44) factor -> . LPAREN expression RPAREN
    (45) factor -> . ID
    (46) factor -> . CTE_INT
    (47) factor -> . CTE_FLOAT
    (48) factor -> . CTE_STRING

    LPAREN          shift and go to state 59
    ID              shift and go to state 55
    CTE_INT         shift and go to state 60
    CTE_FLOAT       shift and go to state 61
    CTE_STRING      shift and go to state 62

    factor                         shift and go to state 98

state 82

    (44) factor -> LPAREN expression . RPAREN
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . MUL expression
    (37) expression -> expression . DIV expression

    RPAREN          shift and go to state 99
    PLUS            shift and go to state 74
    MINUS           shift and go to state 75
    MUL             shift and go to state 76
    DIV             shift and go to state 77


state 83

    (30) f_call -> ID LPAREN arg_list RPAREN . SEMI

    SEMI            shift and go to state 100


state 84

    (31) f_call -> ID LPAREN RPAREN SEMI .

    RBRACE          reduce using rule 31 (f_call -> ID LPAREN RPAREN SEMI .)
    ID              reduce using rule 31 (f_call -> ID LPAREN RPAREN SEMI .)
    IF              reduce using rule 31 (f_call -> ID LPAREN RPAREN SEMI .)
    WHILE           reduce using rule 31 (f_call -> ID LPAREN RPAREN SEMI .)
    DO              reduce using rule 31 (f_call -> ID LPAREN RPAREN SEMI .)
    PRINT           reduce using rule 31 (f_call -> ID LPAREN RPAREN SEMI .)


state 85

    (32) arg_list -> expression COMMA . arg_list
    (32) arg_list -> . expression COMMA arg_list
    (33) arg_list -> . expression
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MUL expression
    (37) expression -> . expression DIV expression
    (38) expression -> . term
    (39) term -> . factor
    (40) term -> . factor LT factor
    (41) term -> . factor GT factor
    (42) term -> . factor EQ factor
    (43) term -> . factor NE factor
    (44) factor -> . LPAREN expression RPAREN
    (45) factor -> . ID
    (46) factor -> . CTE_INT
    (47) factor -> . CTE_FLOAT
    (48) factor -> . CTE_STRING

    LPAREN          shift and go to state 59
    ID              shift and go to state 55
    CTE_INT         shift and go to state 60
    CTE_FLOAT       shift and go to state 61
    CTE_STRING      shift and go to state 62

    expression                     shift and go to state 65
    arg_list                       shift and go to state 101
    term                           shift and go to state 57
    factor                         shift and go to state 58

state 86

    (24) condition -> IF LPAREN expression RPAREN . LBRACE statement_list RBRACE else_part

    LBRACE          shift and go to state 102


state 87

    (27) cycle -> WHILE LPAREN expression RPAREN . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 103


state 88

    (28) cycle -> DO LBRACE statement_list RBRACE . WHILE LPAREN expression RPAREN SEMI

    WHILE           shift and go to state 104


state 89

    (29) print_statement -> PRINT LPAREN expression RPAREN . SEMI

    SEMI            shift and go to state 105


state 90

    (9) funcs -> VOID ID LPAREN parameter_list RPAREN LBRACE statement_list . RBRACE funcs
    (16) statement_list -> statement_list . statement
    (18) statement -> . assign
    (19) statement -> . condition
    (20) statement -> . cycle
    (21) statement -> . print_statement
    (22) statement -> . f_call
    (23) assign -> . ID ASSIGN expression SEMI
    (24) condition -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE else_part
    (27) cycle -> . WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) cycle -> . DO LBRACE statement_list RBRACE WHILE LPAREN expression RPAREN SEMI
    (29) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (30) f_call -> . ID LPAREN arg_list RPAREN SEMI
    (31) f_call -> . ID LPAREN RPAREN SEMI

    RBRACE          shift and go to state 106
    ID              shift and go to state 32
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    PRINT           shift and go to state 36

    statement                      shift and go to state 44
    assign                         shift and go to state 27
    condition                      shift and go to state 28
    cycle                          shift and go to state 29
    print_statement                shift and go to state 30
    f_call                         shift and go to state 31

state 91

    (34) expression -> expression PLUS expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . MUL expression
    (37) expression -> expression . DIV expression

    SEMI            reduce using rule 34 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 34 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 34 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 34 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 34 (expression -> expression PLUS expression .)
    MUL             shift and go to state 76
    DIV             shift and go to state 77

  ! MUL             [ reduce using rule 34 (expression -> expression PLUS expression .) ]
  ! DIV             [ reduce using rule 34 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 74 ]
  ! MINUS           [ shift and go to state 75 ]


state 92

    (35) expression -> expression MINUS expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . MUL expression
    (37) expression -> expression . DIV expression

    SEMI            reduce using rule 35 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 35 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 35 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 35 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 35 (expression -> expression MINUS expression .)
    MUL             shift and go to state 76
    DIV             shift and go to state 77

  ! MUL             [ reduce using rule 35 (expression -> expression MINUS expression .) ]
  ! DIV             [ reduce using rule 35 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 74 ]
  ! MINUS           [ shift and go to state 75 ]


state 93

    (36) expression -> expression MUL expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . MUL expression
    (37) expression -> expression . DIV expression

    SEMI            reduce using rule 36 (expression -> expression MUL expression .)
    PLUS            reduce using rule 36 (expression -> expression MUL expression .)
    MINUS           reduce using rule 36 (expression -> expression MUL expression .)
    MUL             reduce using rule 36 (expression -> expression MUL expression .)
    DIV             reduce using rule 36 (expression -> expression MUL expression .)
    COMMA           reduce using rule 36 (expression -> expression MUL expression .)
    RPAREN          reduce using rule 36 (expression -> expression MUL expression .)

  ! PLUS            [ shift and go to state 74 ]
  ! MINUS           [ shift and go to state 75 ]
  ! MUL             [ shift and go to state 76 ]
  ! DIV             [ shift and go to state 77 ]


state 94

    (37) expression -> expression DIV expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . MUL expression
    (37) expression -> expression . DIV expression

    SEMI            reduce using rule 37 (expression -> expression DIV expression .)
    PLUS            reduce using rule 37 (expression -> expression DIV expression .)
    MINUS           reduce using rule 37 (expression -> expression DIV expression .)
    MUL             reduce using rule 37 (expression -> expression DIV expression .)
    DIV             reduce using rule 37 (expression -> expression DIV expression .)
    COMMA           reduce using rule 37 (expression -> expression DIV expression .)
    RPAREN          reduce using rule 37 (expression -> expression DIV expression .)

  ! PLUS            [ shift and go to state 74 ]
  ! MINUS           [ shift and go to state 75 ]
  ! MUL             [ shift and go to state 76 ]
  ! DIV             [ shift and go to state 77 ]


state 95

    (40) term -> factor LT factor .

    SEMI            reduce using rule 40 (term -> factor LT factor .)
    PLUS            reduce using rule 40 (term -> factor LT factor .)
    MINUS           reduce using rule 40 (term -> factor LT factor .)
    MUL             reduce using rule 40 (term -> factor LT factor .)
    DIV             reduce using rule 40 (term -> factor LT factor .)
    COMMA           reduce using rule 40 (term -> factor LT factor .)
    RPAREN          reduce using rule 40 (term -> factor LT factor .)


state 96

    (41) term -> factor GT factor .

    SEMI            reduce using rule 41 (term -> factor GT factor .)
    PLUS            reduce using rule 41 (term -> factor GT factor .)
    MINUS           reduce using rule 41 (term -> factor GT factor .)
    MUL             reduce using rule 41 (term -> factor GT factor .)
    DIV             reduce using rule 41 (term -> factor GT factor .)
    COMMA           reduce using rule 41 (term -> factor GT factor .)
    RPAREN          reduce using rule 41 (term -> factor GT factor .)


state 97

    (42) term -> factor EQ factor .

    SEMI            reduce using rule 42 (term -> factor EQ factor .)
    PLUS            reduce using rule 42 (term -> factor EQ factor .)
    MINUS           reduce using rule 42 (term -> factor EQ factor .)
    MUL             reduce using rule 42 (term -> factor EQ factor .)
    DIV             reduce using rule 42 (term -> factor EQ factor .)
    COMMA           reduce using rule 42 (term -> factor EQ factor .)
    RPAREN          reduce using rule 42 (term -> factor EQ factor .)


state 98

    (43) term -> factor NE factor .

    SEMI            reduce using rule 43 (term -> factor NE factor .)
    PLUS            reduce using rule 43 (term -> factor NE factor .)
    MINUS           reduce using rule 43 (term -> factor NE factor .)
    MUL             reduce using rule 43 (term -> factor NE factor .)
    DIV             reduce using rule 43 (term -> factor NE factor .)
    COMMA           reduce using rule 43 (term -> factor NE factor .)
    RPAREN          reduce using rule 43 (term -> factor NE factor .)


state 99

    (44) factor -> LPAREN expression RPAREN .

    LT              reduce using rule 44 (factor -> LPAREN expression RPAREN .)
    GT              reduce using rule 44 (factor -> LPAREN expression RPAREN .)
    EQ              reduce using rule 44 (factor -> LPAREN expression RPAREN .)
    NE              reduce using rule 44 (factor -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 44 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 44 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 44 (factor -> LPAREN expression RPAREN .)
    MUL             reduce using rule 44 (factor -> LPAREN expression RPAREN .)
    DIV             reduce using rule 44 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 44 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 44 (factor -> LPAREN expression RPAREN .)


state 100

    (30) f_call -> ID LPAREN arg_list RPAREN SEMI .

    RBRACE          reduce using rule 30 (f_call -> ID LPAREN arg_list RPAREN SEMI .)
    ID              reduce using rule 30 (f_call -> ID LPAREN arg_list RPAREN SEMI .)
    IF              reduce using rule 30 (f_call -> ID LPAREN arg_list RPAREN SEMI .)
    WHILE           reduce using rule 30 (f_call -> ID LPAREN arg_list RPAREN SEMI .)
    DO              reduce using rule 30 (f_call -> ID LPAREN arg_list RPAREN SEMI .)
    PRINT           reduce using rule 30 (f_call -> ID LPAREN arg_list RPAREN SEMI .)


state 101

    (32) arg_list -> expression COMMA arg_list .

    RPAREN          reduce using rule 32 (arg_list -> expression COMMA arg_list .)


state 102

    (24) condition -> IF LPAREN expression RPAREN LBRACE . statement_list RBRACE else_part
    (16) statement_list -> . statement_list statement
    (17) statement_list -> . statement
    (18) statement -> . assign
    (19) statement -> . condition
    (20) statement -> . cycle
    (21) statement -> . print_statement
    (22) statement -> . f_call
    (23) assign -> . ID ASSIGN expression SEMI
    (24) condition -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE else_part
    (27) cycle -> . WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) cycle -> . DO LBRACE statement_list RBRACE WHILE LPAREN expression RPAREN SEMI
    (29) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (30) f_call -> . ID LPAREN arg_list RPAREN SEMI
    (31) f_call -> . ID LPAREN RPAREN SEMI

    ID              shift and go to state 32
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    PRINT           shift and go to state 36

    statement_list                 shift and go to state 107
    statement                      shift and go to state 26
    assign                         shift and go to state 27
    condition                      shift and go to state 28
    cycle                          shift and go to state 29
    print_statement                shift and go to state 30
    f_call                         shift and go to state 31

state 103

    (27) cycle -> WHILE LPAREN expression RPAREN LBRACE . statement_list RBRACE
    (16) statement_list -> . statement_list statement
    (17) statement_list -> . statement
    (18) statement -> . assign
    (19) statement -> . condition
    (20) statement -> . cycle
    (21) statement -> . print_statement
    (22) statement -> . f_call
    (23) assign -> . ID ASSIGN expression SEMI
    (24) condition -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE else_part
    (27) cycle -> . WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) cycle -> . DO LBRACE statement_list RBRACE WHILE LPAREN expression RPAREN SEMI
    (29) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (30) f_call -> . ID LPAREN arg_list RPAREN SEMI
    (31) f_call -> . ID LPAREN RPAREN SEMI

    ID              shift and go to state 32
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    PRINT           shift and go to state 36

    statement_list                 shift and go to state 108
    statement                      shift and go to state 26
    assign                         shift and go to state 27
    condition                      shift and go to state 28
    cycle                          shift and go to state 29
    print_statement                shift and go to state 30
    f_call                         shift and go to state 31

state 104

    (28) cycle -> DO LBRACE statement_list RBRACE WHILE . LPAREN expression RPAREN SEMI

    LPAREN          shift and go to state 109


state 105

    (29) print_statement -> PRINT LPAREN expression RPAREN SEMI .

    RBRACE          reduce using rule 29 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    ID              reduce using rule 29 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    IF              reduce using rule 29 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    WHILE           reduce using rule 29 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    DO              reduce using rule 29 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    PRINT           reduce using rule 29 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)


state 106

    (9) funcs -> VOID ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE . funcs
    (9) funcs -> . VOID ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE funcs
    (10) funcs -> . empty
    (49) empty -> .

    VOID            shift and go to state 9
    MAIN            reduce using rule 49 (empty -> .)

    funcs                          shift and go to state 110
    empty                          shift and go to state 10

state 107

    (24) condition -> IF LPAREN expression RPAREN LBRACE statement_list . RBRACE else_part
    (16) statement_list -> statement_list . statement
    (18) statement -> . assign
    (19) statement -> . condition
    (20) statement -> . cycle
    (21) statement -> . print_statement
    (22) statement -> . f_call
    (23) assign -> . ID ASSIGN expression SEMI
    (24) condition -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE else_part
    (27) cycle -> . WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) cycle -> . DO LBRACE statement_list RBRACE WHILE LPAREN expression RPAREN SEMI
    (29) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (30) f_call -> . ID LPAREN arg_list RPAREN SEMI
    (31) f_call -> . ID LPAREN RPAREN SEMI

    RBRACE          shift and go to state 111
    ID              shift and go to state 32
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    PRINT           shift and go to state 36

    statement                      shift and go to state 44
    assign                         shift and go to state 27
    condition                      shift and go to state 28
    cycle                          shift and go to state 29
    print_statement                shift and go to state 30
    f_call                         shift and go to state 31

state 108

    (27) cycle -> WHILE LPAREN expression RPAREN LBRACE statement_list . RBRACE
    (16) statement_list -> statement_list . statement
    (18) statement -> . assign
    (19) statement -> . condition
    (20) statement -> . cycle
    (21) statement -> . print_statement
    (22) statement -> . f_call
    (23) assign -> . ID ASSIGN expression SEMI
    (24) condition -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE else_part
    (27) cycle -> . WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) cycle -> . DO LBRACE statement_list RBRACE WHILE LPAREN expression RPAREN SEMI
    (29) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (30) f_call -> . ID LPAREN arg_list RPAREN SEMI
    (31) f_call -> . ID LPAREN RPAREN SEMI

    RBRACE          shift and go to state 112
    ID              shift and go to state 32
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    PRINT           shift and go to state 36

    statement                      shift and go to state 44
    assign                         shift and go to state 27
    condition                      shift and go to state 28
    cycle                          shift and go to state 29
    print_statement                shift and go to state 30
    f_call                         shift and go to state 31

state 109

    (28) cycle -> DO LBRACE statement_list RBRACE WHILE LPAREN . expression RPAREN SEMI
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MUL expression
    (37) expression -> . expression DIV expression
    (38) expression -> . term
    (39) term -> . factor
    (40) term -> . factor LT factor
    (41) term -> . factor GT factor
    (42) term -> . factor EQ factor
    (43) term -> . factor NE factor
    (44) factor -> . LPAREN expression RPAREN
    (45) factor -> . ID
    (46) factor -> . CTE_INT
    (47) factor -> . CTE_FLOAT
    (48) factor -> . CTE_STRING

    LPAREN          shift and go to state 59
    ID              shift and go to state 55
    CTE_INT         shift and go to state 60
    CTE_FLOAT       shift and go to state 61
    CTE_STRING      shift and go to state 62

    expression                     shift and go to state 113
    term                           shift and go to state 57
    factor                         shift and go to state 58

state 110

    (9) funcs -> VOID ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE funcs .

    MAIN            reduce using rule 9 (funcs -> VOID ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE funcs .)


state 111

    (24) condition -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE . else_part
    (25) else_part -> . ELSE LBRACE statement_list RBRACE
    (26) else_part -> . empty
    (49) empty -> .

    ELSE            shift and go to state 115
    RBRACE          reduce using rule 49 (empty -> .)
    ID              reduce using rule 49 (empty -> .)
    IF              reduce using rule 49 (empty -> .)
    WHILE           reduce using rule 49 (empty -> .)
    DO              reduce using rule 49 (empty -> .)
    PRINT           reduce using rule 49 (empty -> .)

    else_part                      shift and go to state 114
    empty                          shift and go to state 116

state 112

    (27) cycle -> WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE .

    RBRACE          reduce using rule 27 (cycle -> WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ID              reduce using rule 27 (cycle -> WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    IF              reduce using rule 27 (cycle -> WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 27 (cycle -> WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    DO              reduce using rule 27 (cycle -> WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    PRINT           reduce using rule 27 (cycle -> WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE .)


state 113

    (28) cycle -> DO LBRACE statement_list RBRACE WHILE LPAREN expression . RPAREN SEMI
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . MUL expression
    (37) expression -> expression . DIV expression

    RPAREN          shift and go to state 117
    PLUS            shift and go to state 74
    MINUS           shift and go to state 75
    MUL             shift and go to state 76
    DIV             shift and go to state 77


state 114

    (24) condition -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE else_part .

    RBRACE          reduce using rule 24 (condition -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE else_part .)
    ID              reduce using rule 24 (condition -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE else_part .)
    IF              reduce using rule 24 (condition -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE else_part .)
    WHILE           reduce using rule 24 (condition -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE else_part .)
    DO              reduce using rule 24 (condition -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE else_part .)
    PRINT           reduce using rule 24 (condition -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE else_part .)


state 115

    (25) else_part -> ELSE . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 118


state 116

    (26) else_part -> empty .

    RBRACE          reduce using rule 26 (else_part -> empty .)
    ID              reduce using rule 26 (else_part -> empty .)
    IF              reduce using rule 26 (else_part -> empty .)
    WHILE           reduce using rule 26 (else_part -> empty .)
    DO              reduce using rule 26 (else_part -> empty .)
    PRINT           reduce using rule 26 (else_part -> empty .)


state 117

    (28) cycle -> DO LBRACE statement_list RBRACE WHILE LPAREN expression RPAREN . SEMI

    SEMI            shift and go to state 119


state 118

    (25) else_part -> ELSE LBRACE . statement_list RBRACE
    (16) statement_list -> . statement_list statement
    (17) statement_list -> . statement
    (18) statement -> . assign
    (19) statement -> . condition
    (20) statement -> . cycle
    (21) statement -> . print_statement
    (22) statement -> . f_call
    (23) assign -> . ID ASSIGN expression SEMI
    (24) condition -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE else_part
    (27) cycle -> . WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) cycle -> . DO LBRACE statement_list RBRACE WHILE LPAREN expression RPAREN SEMI
    (29) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (30) f_call -> . ID LPAREN arg_list RPAREN SEMI
    (31) f_call -> . ID LPAREN RPAREN SEMI

    ID              shift and go to state 32
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    PRINT           shift and go to state 36

    statement_list                 shift and go to state 120
    statement                      shift and go to state 26
    assign                         shift and go to state 27
    condition                      shift and go to state 28
    cycle                          shift and go to state 29
    print_statement                shift and go to state 30
    f_call                         shift and go to state 31

state 119

    (28) cycle -> DO LBRACE statement_list RBRACE WHILE LPAREN expression RPAREN SEMI .

    RBRACE          reduce using rule 28 (cycle -> DO LBRACE statement_list RBRACE WHILE LPAREN expression RPAREN SEMI .)
    ID              reduce using rule 28 (cycle -> DO LBRACE statement_list RBRACE WHILE LPAREN expression RPAREN SEMI .)
    IF              reduce using rule 28 (cycle -> DO LBRACE statement_list RBRACE WHILE LPAREN expression RPAREN SEMI .)
    WHILE           reduce using rule 28 (cycle -> DO LBRACE statement_list RBRACE WHILE LPAREN expression RPAREN SEMI .)
    DO              reduce using rule 28 (cycle -> DO LBRACE statement_list RBRACE WHILE LPAREN expression RPAREN SEMI .)
    PRINT           reduce using rule 28 (cycle -> DO LBRACE statement_list RBRACE WHILE LPAREN expression RPAREN SEMI .)


state 120

    (25) else_part -> ELSE LBRACE statement_list . RBRACE
    (16) statement_list -> statement_list . statement
    (18) statement -> . assign
    (19) statement -> . condition
    (20) statement -> . cycle
    (21) statement -> . print_statement
    (22) statement -> . f_call
    (23) assign -> . ID ASSIGN expression SEMI
    (24) condition -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE else_part
    (27) cycle -> . WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) cycle -> . DO LBRACE statement_list RBRACE WHILE LPAREN expression RPAREN SEMI
    (29) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (30) f_call -> . ID LPAREN arg_list RPAREN SEMI
    (31) f_call -> . ID LPAREN RPAREN SEMI

    RBRACE          shift and go to state 121
    ID              shift and go to state 32
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    PRINT           shift and go to state 36

    statement                      shift and go to state 44
    assign                         shift and go to state 27
    condition                      shift and go to state 28
    cycle                          shift and go to state 29
    print_statement                shift and go to state 30
    f_call                         shift and go to state 31

state 121

    (25) else_part -> ELSE LBRACE statement_list RBRACE .

    RBRACE          reduce using rule 25 (else_part -> ELSE LBRACE statement_list RBRACE .)
    ID              reduce using rule 25 (else_part -> ELSE LBRACE statement_list RBRACE .)
    IF              reduce using rule 25 (else_part -> ELSE LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 25 (else_part -> ELSE LBRACE statement_list RBRACE .)
    DO              reduce using rule 25 (else_part -> ELSE LBRACE statement_list RBRACE .)
    PRINT           reduce using rule 25 (else_part -> ELSE LBRACE statement_list RBRACE .)

