Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Programa
Rule 1     Programa -> PROGRAM PROGRAM_ID SEMICOLON PRV main_func BODY END
Rule 2     PROGRAM_ID -> ID
Rule 3     PRV -> VARS
Rule 4     PRV -> EMPTY
Rule 5     VARS -> VAR VAR_DECLS
Rule 6     VAR_DECLS -> VAR_DECL VAR_DECLS
Rule 7     VAR_DECLS -> VAR_DECL
Rule 8     VAR_DECL -> ID_LIST COLON TYPE SEMICOLON
Rule 9     ID_LIST -> ID COMMA ID_LIST
Rule 10    ID_LIST -> ID
Rule 11    main_func -> MAIN
Rule 12    BODY -> LBRACE STATEMENTS RBRACE
Rule 13    STATEMENTS -> STATEMENT STATEMENTS
Rule 14    STATEMENTS -> EMPTY
Rule 15    STATEMENT -> assignment
Rule 16    STATEMENT -> FCAL
Rule 17    STATEMENT -> print_statement
Rule 18    STATEMENT -> condition
Rule 19    STATEMENT -> cycle
Rule 20    STATEMENT -> do_while
Rule 21    assignment -> ID ASSIGN Expresion SEMICOLON
Rule 22    Expresion -> EXP ET
Rule 23    ET -> ETP EXP
Rule 24    ET -> EMPTY
Rule 25    ETP -> GREATER
Rule 26    ETP -> LESS
Rule 27    ETP -> NOTEQUAL
Rule 28    EXP -> Term EXPP
Rule 29    EXPP -> PLUS Term EXPP
Rule 30    EXPP -> MINUS Term EXPP
Rule 31    EXPP -> EMPTY
Rule 32    Term -> Factor SubTerm
Rule 33    SubTerm -> TIMES Factor SubTerm
Rule 34    SubTerm -> DIVIDE Factor SubTerm
Rule 35    SubTerm -> EMPTY
Rule 36    Factor -> LPAREN Expresion RPAREN
Rule 37    Factor -> Subfactor ID
Rule 38    Factor -> Subfactor CTE
Rule 39    Subfactor -> EMPTY
Rule 40    Subfactor -> PLUS
Rule 41    Subfactor -> MINUS
Rule 42    CTE -> CTE_INT
Rule 43    CTE -> CTE_FLOAT
Rule 44    TYPE -> INT
Rule 45    TYPE -> FLOAT
Rule 46    FCAL -> ID LPAREN FCALP RPAREN SEMICOLON
Rule 47    FCALP -> Expresion FCALPP
Rule 48    FCALP -> EMPTY
Rule 49    FCALPP -> COMMA FCALP
Rule 50    FCALPP -> EMPTY
Rule 51    print_statement -> PRINT LPAREN PRI
Rule 52    PRI -> Expresion PRIP
Rule 53    PRI -> CTE_STRING PRIP
Rule 54    PRIP -> COMMA PRI
Rule 55    PRIP -> RPAREN SEMICOLON
Rule 56    condition -> IF LPAREN Expresion RPAREN BODY subcondition
Rule 57    subcondition -> ELSE BODY
Rule 58    subcondition -> EMPTY
Rule 59    cycle -> WHILE LPAREN Expresion RPAREN BODY
Rule 60    do_while -> DO BODY WHILE LPAREN Expresion RPAREN SEMICOLON
Rule 61    EMPTY -> <empty>

Terminals, with rules where they appear

ASSIGN               : 21
COLON                : 8
COMMA                : 9 49 54
CTE_FLOAT            : 43
CTE_INT              : 42
CTE_STRING           : 53
DIVIDE               : 34
DO                   : 60
ELSE                 : 57
END                  : 1
FLOAT                : 45
GREATER              : 25
ID                   : 2 9 10 21 37 46
IF                   : 56
INT                  : 44
LBRACE               : 12
LESS                 : 26
LPAREN               : 36 46 51 56 59 60
MAIN                 : 11
MINUS                : 30 41
NOTEQUAL             : 27
PLUS                 : 29 40
PRINT                : 51
PROGRAM              : 1
RBRACE               : 12
RPAREN               : 36 46 55 56 59 60
SEMICOLON            : 1 8 21 46 55 60
TIMES                : 33
VAR                  : 5
WHILE                : 59 60
error                : 

Nonterminals, with rules where they appear

BODY                 : 1 56 57 59 60
CTE                  : 38
EMPTY                : 4 14 24 31 35 39 48 50 58
ET                   : 22
ETP                  : 23
EXP                  : 22 23
EXPP                 : 28 29 30
Expresion            : 21 36 47 52 56 59 60
FCAL                 : 16
FCALP                : 46 49
FCALPP               : 47
Factor               : 32 33 34
ID_LIST              : 8 9
PRI                  : 51 54
PRIP                 : 52 53
PROGRAM_ID           : 1
PRV                  : 1
Programa             : 0
STATEMENT            : 13
STATEMENTS           : 12 13
SubTerm              : 32 33 34
Subfactor            : 37 38
TYPE                 : 8
Term                 : 28 29 30
VARS                 : 3
VAR_DECL             : 6 7
VAR_DECLS            : 5 6
assignment           : 15
condition            : 18
cycle                : 19
do_while             : 20
main_func            : 1
print_statement      : 17
subcondition         : 56

Parsing method: LALR

state 0

    (0) S' -> . Programa
    (1) Programa -> . PROGRAM PROGRAM_ID SEMICOLON PRV main_func BODY END

    PROGRAM         shift and go to state 2

    Programa                       shift and go to state 1

state 1

    (0) S' -> Programa .



state 2

    (1) Programa -> PROGRAM . PROGRAM_ID SEMICOLON PRV main_func BODY END
    (2) PROGRAM_ID -> . ID

    ID              shift and go to state 4

    PROGRAM_ID                     shift and go to state 3

state 3

    (1) Programa -> PROGRAM PROGRAM_ID . SEMICOLON PRV main_func BODY END

    SEMICOLON       shift and go to state 5


state 4

    (2) PROGRAM_ID -> ID .

    SEMICOLON       reduce using rule 2 (PROGRAM_ID -> ID .)


state 5

    (1) Programa -> PROGRAM PROGRAM_ID SEMICOLON . PRV main_func BODY END
    (3) PRV -> . VARS
    (4) PRV -> . EMPTY
    (5) VARS -> . VAR VAR_DECLS
    (61) EMPTY -> .

    VAR             shift and go to state 9
    MAIN            reduce using rule 61 (EMPTY -> .)

    PRV                            shift and go to state 6
    VARS                           shift and go to state 7
    EMPTY                          shift and go to state 8

state 6

    (1) Programa -> PROGRAM PROGRAM_ID SEMICOLON PRV . main_func BODY END
    (11) main_func -> . MAIN

    MAIN            shift and go to state 11

    main_func                      shift and go to state 10

state 7

    (3) PRV -> VARS .

    MAIN            reduce using rule 3 (PRV -> VARS .)


state 8

    (4) PRV -> EMPTY .

    MAIN            reduce using rule 4 (PRV -> EMPTY .)


state 9

    (5) VARS -> VAR . VAR_DECLS
    (6) VAR_DECLS -> . VAR_DECL VAR_DECLS
    (7) VAR_DECLS -> . VAR_DECL
    (8) VAR_DECL -> . ID_LIST COLON TYPE SEMICOLON
    (9) ID_LIST -> . ID COMMA ID_LIST
    (10) ID_LIST -> . ID

    ID              shift and go to state 15

    VAR_DECLS                      shift and go to state 12
    VAR_DECL                       shift and go to state 13
    ID_LIST                        shift and go to state 14

state 10

    (1) Programa -> PROGRAM PROGRAM_ID SEMICOLON PRV main_func . BODY END
    (12) BODY -> . LBRACE STATEMENTS RBRACE

    LBRACE          shift and go to state 17

    BODY                           shift and go to state 16

state 11

    (11) main_func -> MAIN .

    LBRACE          reduce using rule 11 (main_func -> MAIN .)


state 12

    (5) VARS -> VAR VAR_DECLS .

    MAIN            reduce using rule 5 (VARS -> VAR VAR_DECLS .)


state 13

    (6) VAR_DECLS -> VAR_DECL . VAR_DECLS
    (7) VAR_DECLS -> VAR_DECL .
    (6) VAR_DECLS -> . VAR_DECL VAR_DECLS
    (7) VAR_DECLS -> . VAR_DECL
    (8) VAR_DECL -> . ID_LIST COLON TYPE SEMICOLON
    (9) ID_LIST -> . ID COMMA ID_LIST
    (10) ID_LIST -> . ID

    MAIN            reduce using rule 7 (VAR_DECLS -> VAR_DECL .)
    ID              shift and go to state 15

    VAR_DECL                       shift and go to state 13
    VAR_DECLS                      shift and go to state 18
    ID_LIST                        shift and go to state 14

state 14

    (8) VAR_DECL -> ID_LIST . COLON TYPE SEMICOLON

    COLON           shift and go to state 19


state 15

    (9) ID_LIST -> ID . COMMA ID_LIST
    (10) ID_LIST -> ID .

    COMMA           shift and go to state 20
    COLON           reduce using rule 10 (ID_LIST -> ID .)


state 16

    (1) Programa -> PROGRAM PROGRAM_ID SEMICOLON PRV main_func BODY . END

    END             shift and go to state 21


state 17

    (12) BODY -> LBRACE . STATEMENTS RBRACE
    (13) STATEMENTS -> . STATEMENT STATEMENTS
    (14) STATEMENTS -> . EMPTY
    (15) STATEMENT -> . assignment
    (16) STATEMENT -> . FCAL
    (17) STATEMENT -> . print_statement
    (18) STATEMENT -> . condition
    (19) STATEMENT -> . cycle
    (20) STATEMENT -> . do_while
    (61) EMPTY -> .
    (21) assignment -> . ID ASSIGN Expresion SEMICOLON
    (46) FCAL -> . ID LPAREN FCALP RPAREN SEMICOLON
    (51) print_statement -> . PRINT LPAREN PRI
    (56) condition -> . IF LPAREN Expresion RPAREN BODY subcondition
    (59) cycle -> . WHILE LPAREN Expresion RPAREN BODY
    (60) do_while -> . DO BODY WHILE LPAREN Expresion RPAREN SEMICOLON

    RBRACE          reduce using rule 61 (EMPTY -> .)
    ID              shift and go to state 31
    PRINT           shift and go to state 32
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35

    STATEMENTS                     shift and go to state 22
    STATEMENT                      shift and go to state 23
    EMPTY                          shift and go to state 24
    assignment                     shift and go to state 25
    FCAL                           shift and go to state 26
    print_statement                shift and go to state 27
    condition                      shift and go to state 28
    cycle                          shift and go to state 29
    do_while                       shift and go to state 30

state 18

    (6) VAR_DECLS -> VAR_DECL VAR_DECLS .

    MAIN            reduce using rule 6 (VAR_DECLS -> VAR_DECL VAR_DECLS .)


state 19

    (8) VAR_DECL -> ID_LIST COLON . TYPE SEMICOLON
    (44) TYPE -> . INT
    (45) TYPE -> . FLOAT

    INT             shift and go to state 37
    FLOAT           shift and go to state 38

    TYPE                           shift and go to state 36

state 20

    (9) ID_LIST -> ID COMMA . ID_LIST
    (9) ID_LIST -> . ID COMMA ID_LIST
    (10) ID_LIST -> . ID

    ID              shift and go to state 15

    ID_LIST                        shift and go to state 39

state 21

    (1) Programa -> PROGRAM PROGRAM_ID SEMICOLON PRV main_func BODY END .

    $end            reduce using rule 1 (Programa -> PROGRAM PROGRAM_ID SEMICOLON PRV main_func BODY END .)


state 22

    (12) BODY -> LBRACE STATEMENTS . RBRACE

    RBRACE          shift and go to state 40


state 23

    (13) STATEMENTS -> STATEMENT . STATEMENTS
    (13) STATEMENTS -> . STATEMENT STATEMENTS
    (14) STATEMENTS -> . EMPTY
    (15) STATEMENT -> . assignment
    (16) STATEMENT -> . FCAL
    (17) STATEMENT -> . print_statement
    (18) STATEMENT -> . condition
    (19) STATEMENT -> . cycle
    (20) STATEMENT -> . do_while
    (61) EMPTY -> .
    (21) assignment -> . ID ASSIGN Expresion SEMICOLON
    (46) FCAL -> . ID LPAREN FCALP RPAREN SEMICOLON
    (51) print_statement -> . PRINT LPAREN PRI
    (56) condition -> . IF LPAREN Expresion RPAREN BODY subcondition
    (59) cycle -> . WHILE LPAREN Expresion RPAREN BODY
    (60) do_while -> . DO BODY WHILE LPAREN Expresion RPAREN SEMICOLON

    RBRACE          reduce using rule 61 (EMPTY -> .)
    ID              shift and go to state 31
    PRINT           shift and go to state 32
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35

    STATEMENT                      shift and go to state 23
    STATEMENTS                     shift and go to state 41
    EMPTY                          shift and go to state 24
    assignment                     shift and go to state 25
    FCAL                           shift and go to state 26
    print_statement                shift and go to state 27
    condition                      shift and go to state 28
    cycle                          shift and go to state 29
    do_while                       shift and go to state 30

state 24

    (14) STATEMENTS -> EMPTY .

    RBRACE          reduce using rule 14 (STATEMENTS -> EMPTY .)


state 25

    (15) STATEMENT -> assignment .

    ID              reduce using rule 15 (STATEMENT -> assignment .)
    PRINT           reduce using rule 15 (STATEMENT -> assignment .)
    IF              reduce using rule 15 (STATEMENT -> assignment .)
    WHILE           reduce using rule 15 (STATEMENT -> assignment .)
    DO              reduce using rule 15 (STATEMENT -> assignment .)
    RBRACE          reduce using rule 15 (STATEMENT -> assignment .)


state 26

    (16) STATEMENT -> FCAL .

    ID              reduce using rule 16 (STATEMENT -> FCAL .)
    PRINT           reduce using rule 16 (STATEMENT -> FCAL .)
    IF              reduce using rule 16 (STATEMENT -> FCAL .)
    WHILE           reduce using rule 16 (STATEMENT -> FCAL .)
    DO              reduce using rule 16 (STATEMENT -> FCAL .)
    RBRACE          reduce using rule 16 (STATEMENT -> FCAL .)


state 27

    (17) STATEMENT -> print_statement .

    ID              reduce using rule 17 (STATEMENT -> print_statement .)
    PRINT           reduce using rule 17 (STATEMENT -> print_statement .)
    IF              reduce using rule 17 (STATEMENT -> print_statement .)
    WHILE           reduce using rule 17 (STATEMENT -> print_statement .)
    DO              reduce using rule 17 (STATEMENT -> print_statement .)
    RBRACE          reduce using rule 17 (STATEMENT -> print_statement .)


state 28

    (18) STATEMENT -> condition .

    ID              reduce using rule 18 (STATEMENT -> condition .)
    PRINT           reduce using rule 18 (STATEMENT -> condition .)
    IF              reduce using rule 18 (STATEMENT -> condition .)
    WHILE           reduce using rule 18 (STATEMENT -> condition .)
    DO              reduce using rule 18 (STATEMENT -> condition .)
    RBRACE          reduce using rule 18 (STATEMENT -> condition .)


state 29

    (19) STATEMENT -> cycle .

    ID              reduce using rule 19 (STATEMENT -> cycle .)
    PRINT           reduce using rule 19 (STATEMENT -> cycle .)
    IF              reduce using rule 19 (STATEMENT -> cycle .)
    WHILE           reduce using rule 19 (STATEMENT -> cycle .)
    DO              reduce using rule 19 (STATEMENT -> cycle .)
    RBRACE          reduce using rule 19 (STATEMENT -> cycle .)


state 30

    (20) STATEMENT -> do_while .

    ID              reduce using rule 20 (STATEMENT -> do_while .)
    PRINT           reduce using rule 20 (STATEMENT -> do_while .)
    IF              reduce using rule 20 (STATEMENT -> do_while .)
    WHILE           reduce using rule 20 (STATEMENT -> do_while .)
    DO              reduce using rule 20 (STATEMENT -> do_while .)
    RBRACE          reduce using rule 20 (STATEMENT -> do_while .)


state 31

    (21) assignment -> ID . ASSIGN Expresion SEMICOLON
    (46) FCAL -> ID . LPAREN FCALP RPAREN SEMICOLON

    ASSIGN          shift and go to state 42
    LPAREN          shift and go to state 43


state 32

    (51) print_statement -> PRINT . LPAREN PRI

    LPAREN          shift and go to state 44


state 33

    (56) condition -> IF . LPAREN Expresion RPAREN BODY subcondition

    LPAREN          shift and go to state 45


state 34

    (59) cycle -> WHILE . LPAREN Expresion RPAREN BODY

    LPAREN          shift and go to state 46


state 35

    (60) do_while -> DO . BODY WHILE LPAREN Expresion RPAREN SEMICOLON
    (12) BODY -> . LBRACE STATEMENTS RBRACE

    LBRACE          shift and go to state 17

    BODY                           shift and go to state 47

state 36

    (8) VAR_DECL -> ID_LIST COLON TYPE . SEMICOLON

    SEMICOLON       shift and go to state 48


state 37

    (44) TYPE -> INT .

    SEMICOLON       reduce using rule 44 (TYPE -> INT .)


state 38

    (45) TYPE -> FLOAT .

    SEMICOLON       reduce using rule 45 (TYPE -> FLOAT .)


state 39

    (9) ID_LIST -> ID COMMA ID_LIST .

    COLON           reduce using rule 9 (ID_LIST -> ID COMMA ID_LIST .)


state 40

    (12) BODY -> LBRACE STATEMENTS RBRACE .

    END             reduce using rule 12 (BODY -> LBRACE STATEMENTS RBRACE .)
    WHILE           reduce using rule 12 (BODY -> LBRACE STATEMENTS RBRACE .)
    ELSE            reduce using rule 12 (BODY -> LBRACE STATEMENTS RBRACE .)
    ID              reduce using rule 12 (BODY -> LBRACE STATEMENTS RBRACE .)
    PRINT           reduce using rule 12 (BODY -> LBRACE STATEMENTS RBRACE .)
    IF              reduce using rule 12 (BODY -> LBRACE STATEMENTS RBRACE .)
    DO              reduce using rule 12 (BODY -> LBRACE STATEMENTS RBRACE .)
    RBRACE          reduce using rule 12 (BODY -> LBRACE STATEMENTS RBRACE .)


state 41

    (13) STATEMENTS -> STATEMENT STATEMENTS .

    RBRACE          reduce using rule 13 (STATEMENTS -> STATEMENT STATEMENTS .)


state 42

    (21) assignment -> ID ASSIGN . Expresion SEMICOLON
    (22) Expresion -> . EXP ET
    (28) EXP -> . Term EXPP
    (32) Term -> . Factor SubTerm
    (36) Factor -> . LPAREN Expresion RPAREN
    (37) Factor -> . Subfactor ID
    (38) Factor -> . Subfactor CTE
    (39) Subfactor -> . EMPTY
    (40) Subfactor -> . PLUS
    (41) Subfactor -> . MINUS
    (61) EMPTY -> .

    LPAREN          shift and go to state 53
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    ID              reduce using rule 61 (EMPTY -> .)
    CTE_INT         reduce using rule 61 (EMPTY -> .)
    CTE_FLOAT       reduce using rule 61 (EMPTY -> .)

    Expresion                      shift and go to state 49
    EXP                            shift and go to state 50
    Term                           shift and go to state 51
    Factor                         shift and go to state 52
    Subfactor                      shift and go to state 54
    EMPTY                          shift and go to state 55

state 43

    (46) FCAL -> ID LPAREN . FCALP RPAREN SEMICOLON
    (47) FCALP -> . Expresion FCALPP
    (48) FCALP -> . EMPTY
    (22) Expresion -> . EXP ET
    (61) EMPTY -> .
    (28) EXP -> . Term EXPP
    (32) Term -> . Factor SubTerm
    (36) Factor -> . LPAREN Expresion RPAREN
    (37) Factor -> . Subfactor ID
    (38) Factor -> . Subfactor CTE
    (39) Subfactor -> . EMPTY
    (40) Subfactor -> . PLUS
    (41) Subfactor -> . MINUS

    RPAREN          reduce using rule 61 (EMPTY -> .)
    ID              reduce using rule 61 (EMPTY -> .)
    CTE_INT         reduce using rule 61 (EMPTY -> .)
    CTE_FLOAT       reduce using rule 61 (EMPTY -> .)
    LPAREN          shift and go to state 53
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57

    FCALP                          shift and go to state 58
    Expresion                      shift and go to state 59
    EMPTY                          shift and go to state 60
    EXP                            shift and go to state 50
    Term                           shift and go to state 51
    Factor                         shift and go to state 52
    Subfactor                      shift and go to state 54

state 44

    (51) print_statement -> PRINT LPAREN . PRI
    (52) PRI -> . Expresion PRIP
    (53) PRI -> . CTE_STRING PRIP
    (22) Expresion -> . EXP ET
    (28) EXP -> . Term EXPP
    (32) Term -> . Factor SubTerm
    (36) Factor -> . LPAREN Expresion RPAREN
    (37) Factor -> . Subfactor ID
    (38) Factor -> . Subfactor CTE
    (39) Subfactor -> . EMPTY
    (40) Subfactor -> . PLUS
    (41) Subfactor -> . MINUS
    (61) EMPTY -> .

    CTE_STRING      shift and go to state 63
    LPAREN          shift and go to state 53
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    ID              reduce using rule 61 (EMPTY -> .)
    CTE_INT         reduce using rule 61 (EMPTY -> .)
    CTE_FLOAT       reduce using rule 61 (EMPTY -> .)

    PRI                            shift and go to state 61
    Expresion                      shift and go to state 62
    EXP                            shift and go to state 50
    Term                           shift and go to state 51
    Factor                         shift and go to state 52
    Subfactor                      shift and go to state 54
    EMPTY                          shift and go to state 55

state 45

    (56) condition -> IF LPAREN . Expresion RPAREN BODY subcondition
    (22) Expresion -> . EXP ET
    (28) EXP -> . Term EXPP
    (32) Term -> . Factor SubTerm
    (36) Factor -> . LPAREN Expresion RPAREN
    (37) Factor -> . Subfactor ID
    (38) Factor -> . Subfactor CTE
    (39) Subfactor -> . EMPTY
    (40) Subfactor -> . PLUS
    (41) Subfactor -> . MINUS
    (61) EMPTY -> .

    LPAREN          shift and go to state 53
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    ID              reduce using rule 61 (EMPTY -> .)
    CTE_INT         reduce using rule 61 (EMPTY -> .)
    CTE_FLOAT       reduce using rule 61 (EMPTY -> .)

    Expresion                      shift and go to state 64
    EXP                            shift and go to state 50
    Term                           shift and go to state 51
    Factor                         shift and go to state 52
    Subfactor                      shift and go to state 54
    EMPTY                          shift and go to state 55

state 46

    (59) cycle -> WHILE LPAREN . Expresion RPAREN BODY
    (22) Expresion -> . EXP ET
    (28) EXP -> . Term EXPP
    (32) Term -> . Factor SubTerm
    (36) Factor -> . LPAREN Expresion RPAREN
    (37) Factor -> . Subfactor ID
    (38) Factor -> . Subfactor CTE
    (39) Subfactor -> . EMPTY
    (40) Subfactor -> . PLUS
    (41) Subfactor -> . MINUS
    (61) EMPTY -> .

    LPAREN          shift and go to state 53
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    ID              reduce using rule 61 (EMPTY -> .)
    CTE_INT         reduce using rule 61 (EMPTY -> .)
    CTE_FLOAT       reduce using rule 61 (EMPTY -> .)

    Expresion                      shift and go to state 65
    EXP                            shift and go to state 50
    Term                           shift and go to state 51
    Factor                         shift and go to state 52
    Subfactor                      shift and go to state 54
    EMPTY                          shift and go to state 55

state 47

    (60) do_while -> DO BODY . WHILE LPAREN Expresion RPAREN SEMICOLON

    WHILE           shift and go to state 66


state 48

    (8) VAR_DECL -> ID_LIST COLON TYPE SEMICOLON .

    ID              reduce using rule 8 (VAR_DECL -> ID_LIST COLON TYPE SEMICOLON .)
    MAIN            reduce using rule 8 (VAR_DECL -> ID_LIST COLON TYPE SEMICOLON .)


state 49

    (21) assignment -> ID ASSIGN Expresion . SEMICOLON

    SEMICOLON       shift and go to state 67


state 50

    (22) Expresion -> EXP . ET
    (23) ET -> . ETP EXP
    (24) ET -> . EMPTY
    (25) ETP -> . GREATER
    (26) ETP -> . LESS
    (27) ETP -> . NOTEQUAL
    (61) EMPTY -> .

    GREATER         shift and go to state 71
    LESS            shift and go to state 72
    NOTEQUAL        shift and go to state 73
    SEMICOLON       reduce using rule 61 (EMPTY -> .)
    COMMA           reduce using rule 61 (EMPTY -> .)
    RPAREN          reduce using rule 61 (EMPTY -> .)

    ET                             shift and go to state 68
    ETP                            shift and go to state 69
    EMPTY                          shift and go to state 70

state 51

    (28) EXP -> Term . EXPP
    (29) EXPP -> . PLUS Term EXPP
    (30) EXPP -> . MINUS Term EXPP
    (31) EXPP -> . EMPTY
    (61) EMPTY -> .

    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    GREATER         reduce using rule 61 (EMPTY -> .)
    LESS            reduce using rule 61 (EMPTY -> .)
    NOTEQUAL        reduce using rule 61 (EMPTY -> .)
    SEMICOLON       reduce using rule 61 (EMPTY -> .)
    COMMA           reduce using rule 61 (EMPTY -> .)
    RPAREN          reduce using rule 61 (EMPTY -> .)

    EXPP                           shift and go to state 74
    EMPTY                          shift and go to state 77

state 52

    (32) Term -> Factor . SubTerm
    (33) SubTerm -> . TIMES Factor SubTerm
    (34) SubTerm -> . DIVIDE Factor SubTerm
    (35) SubTerm -> . EMPTY
    (61) EMPTY -> .

    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 80
    PLUS            reduce using rule 61 (EMPTY -> .)
    MINUS           reduce using rule 61 (EMPTY -> .)
    GREATER         reduce using rule 61 (EMPTY -> .)
    LESS            reduce using rule 61 (EMPTY -> .)
    NOTEQUAL        reduce using rule 61 (EMPTY -> .)
    SEMICOLON       reduce using rule 61 (EMPTY -> .)
    COMMA           reduce using rule 61 (EMPTY -> .)
    RPAREN          reduce using rule 61 (EMPTY -> .)

    SubTerm                        shift and go to state 78
    EMPTY                          shift and go to state 81

state 53

    (36) Factor -> LPAREN . Expresion RPAREN
    (22) Expresion -> . EXP ET
    (28) EXP -> . Term EXPP
    (32) Term -> . Factor SubTerm
    (36) Factor -> . LPAREN Expresion RPAREN
    (37) Factor -> . Subfactor ID
    (38) Factor -> . Subfactor CTE
    (39) Subfactor -> . EMPTY
    (40) Subfactor -> . PLUS
    (41) Subfactor -> . MINUS
    (61) EMPTY -> .

    LPAREN          shift and go to state 53
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    ID              reduce using rule 61 (EMPTY -> .)
    CTE_INT         reduce using rule 61 (EMPTY -> .)
    CTE_FLOAT       reduce using rule 61 (EMPTY -> .)

    Expresion                      shift and go to state 82
    EXP                            shift and go to state 50
    Term                           shift and go to state 51
    Factor                         shift and go to state 52
    Subfactor                      shift and go to state 54
    EMPTY                          shift and go to state 55

state 54

    (37) Factor -> Subfactor . ID
    (38) Factor -> Subfactor . CTE
    (42) CTE -> . CTE_INT
    (43) CTE -> . CTE_FLOAT

    ID              shift and go to state 83
    CTE_INT         shift and go to state 85
    CTE_FLOAT       shift and go to state 86

    CTE                            shift and go to state 84

state 55

    (39) Subfactor -> EMPTY .

    ID              reduce using rule 39 (Subfactor -> EMPTY .)
    CTE_INT         reduce using rule 39 (Subfactor -> EMPTY .)
    CTE_FLOAT       reduce using rule 39 (Subfactor -> EMPTY .)


state 56

    (40) Subfactor -> PLUS .

    ID              reduce using rule 40 (Subfactor -> PLUS .)
    CTE_INT         reduce using rule 40 (Subfactor -> PLUS .)
    CTE_FLOAT       reduce using rule 40 (Subfactor -> PLUS .)


state 57

    (41) Subfactor -> MINUS .

    ID              reduce using rule 41 (Subfactor -> MINUS .)
    CTE_INT         reduce using rule 41 (Subfactor -> MINUS .)
    CTE_FLOAT       reduce using rule 41 (Subfactor -> MINUS .)


state 58

    (46) FCAL -> ID LPAREN FCALP . RPAREN SEMICOLON

    RPAREN          shift and go to state 87


state 59

    (47) FCALP -> Expresion . FCALPP
    (49) FCALPP -> . COMMA FCALP
    (50) FCALPP -> . EMPTY
    (61) EMPTY -> .

    COMMA           shift and go to state 89
    RPAREN          reduce using rule 61 (EMPTY -> .)

    FCALPP                         shift and go to state 88
    EMPTY                          shift and go to state 90

state 60

    (48) FCALP -> EMPTY .
    (39) Subfactor -> EMPTY .

    RPAREN          reduce using rule 48 (FCALP -> EMPTY .)
    ID              reduce using rule 39 (Subfactor -> EMPTY .)
    CTE_INT         reduce using rule 39 (Subfactor -> EMPTY .)
    CTE_FLOAT       reduce using rule 39 (Subfactor -> EMPTY .)


state 61

    (51) print_statement -> PRINT LPAREN PRI .

    ID              reduce using rule 51 (print_statement -> PRINT LPAREN PRI .)
    PRINT           reduce using rule 51 (print_statement -> PRINT LPAREN PRI .)
    IF              reduce using rule 51 (print_statement -> PRINT LPAREN PRI .)
    WHILE           reduce using rule 51 (print_statement -> PRINT LPAREN PRI .)
    DO              reduce using rule 51 (print_statement -> PRINT LPAREN PRI .)
    RBRACE          reduce using rule 51 (print_statement -> PRINT LPAREN PRI .)


state 62

    (52) PRI -> Expresion . PRIP
    (54) PRIP -> . COMMA PRI
    (55) PRIP -> . RPAREN SEMICOLON

    COMMA           shift and go to state 92
    RPAREN          shift and go to state 93

    PRIP                           shift and go to state 91

state 63

    (53) PRI -> CTE_STRING . PRIP
    (54) PRIP -> . COMMA PRI
    (55) PRIP -> . RPAREN SEMICOLON

    COMMA           shift and go to state 92
    RPAREN          shift and go to state 93

    PRIP                           shift and go to state 94

state 64

    (56) condition -> IF LPAREN Expresion . RPAREN BODY subcondition

    RPAREN          shift and go to state 95


state 65

    (59) cycle -> WHILE LPAREN Expresion . RPAREN BODY

    RPAREN          shift and go to state 96


state 66

    (60) do_while -> DO BODY WHILE . LPAREN Expresion RPAREN SEMICOLON

    LPAREN          shift and go to state 97


state 67

    (21) assignment -> ID ASSIGN Expresion SEMICOLON .

    ID              reduce using rule 21 (assignment -> ID ASSIGN Expresion SEMICOLON .)
    PRINT           reduce using rule 21 (assignment -> ID ASSIGN Expresion SEMICOLON .)
    IF              reduce using rule 21 (assignment -> ID ASSIGN Expresion SEMICOLON .)
    WHILE           reduce using rule 21 (assignment -> ID ASSIGN Expresion SEMICOLON .)
    DO              reduce using rule 21 (assignment -> ID ASSIGN Expresion SEMICOLON .)
    RBRACE          reduce using rule 21 (assignment -> ID ASSIGN Expresion SEMICOLON .)


state 68

    (22) Expresion -> EXP ET .

    SEMICOLON       reduce using rule 22 (Expresion -> EXP ET .)
    COMMA           reduce using rule 22 (Expresion -> EXP ET .)
    RPAREN          reduce using rule 22 (Expresion -> EXP ET .)


state 69

    (23) ET -> ETP . EXP
    (28) EXP -> . Term EXPP
    (32) Term -> . Factor SubTerm
    (36) Factor -> . LPAREN Expresion RPAREN
    (37) Factor -> . Subfactor ID
    (38) Factor -> . Subfactor CTE
    (39) Subfactor -> . EMPTY
    (40) Subfactor -> . PLUS
    (41) Subfactor -> . MINUS
    (61) EMPTY -> .

    LPAREN          shift and go to state 53
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    ID              reduce using rule 61 (EMPTY -> .)
    CTE_INT         reduce using rule 61 (EMPTY -> .)
    CTE_FLOAT       reduce using rule 61 (EMPTY -> .)

    EXP                            shift and go to state 98
    Term                           shift and go to state 51
    Factor                         shift and go to state 52
    Subfactor                      shift and go to state 54
    EMPTY                          shift and go to state 55

state 70

    (24) ET -> EMPTY .

    SEMICOLON       reduce using rule 24 (ET -> EMPTY .)
    COMMA           reduce using rule 24 (ET -> EMPTY .)
    RPAREN          reduce using rule 24 (ET -> EMPTY .)


state 71

    (25) ETP -> GREATER .

    LPAREN          reduce using rule 25 (ETP -> GREATER .)
    PLUS            reduce using rule 25 (ETP -> GREATER .)
    MINUS           reduce using rule 25 (ETP -> GREATER .)
    ID              reduce using rule 25 (ETP -> GREATER .)
    CTE_INT         reduce using rule 25 (ETP -> GREATER .)
    CTE_FLOAT       reduce using rule 25 (ETP -> GREATER .)


state 72

    (26) ETP -> LESS .

    LPAREN          reduce using rule 26 (ETP -> LESS .)
    PLUS            reduce using rule 26 (ETP -> LESS .)
    MINUS           reduce using rule 26 (ETP -> LESS .)
    ID              reduce using rule 26 (ETP -> LESS .)
    CTE_INT         reduce using rule 26 (ETP -> LESS .)
    CTE_FLOAT       reduce using rule 26 (ETP -> LESS .)


state 73

    (27) ETP -> NOTEQUAL .

    LPAREN          reduce using rule 27 (ETP -> NOTEQUAL .)
    PLUS            reduce using rule 27 (ETP -> NOTEQUAL .)
    MINUS           reduce using rule 27 (ETP -> NOTEQUAL .)
    ID              reduce using rule 27 (ETP -> NOTEQUAL .)
    CTE_INT         reduce using rule 27 (ETP -> NOTEQUAL .)
    CTE_FLOAT       reduce using rule 27 (ETP -> NOTEQUAL .)


state 74

    (28) EXP -> Term EXPP .

    GREATER         reduce using rule 28 (EXP -> Term EXPP .)
    LESS            reduce using rule 28 (EXP -> Term EXPP .)
    NOTEQUAL        reduce using rule 28 (EXP -> Term EXPP .)
    SEMICOLON       reduce using rule 28 (EXP -> Term EXPP .)
    COMMA           reduce using rule 28 (EXP -> Term EXPP .)
    RPAREN          reduce using rule 28 (EXP -> Term EXPP .)


state 75

    (29) EXPP -> PLUS . Term EXPP
    (32) Term -> . Factor SubTerm
    (36) Factor -> . LPAREN Expresion RPAREN
    (37) Factor -> . Subfactor ID
    (38) Factor -> . Subfactor CTE
    (39) Subfactor -> . EMPTY
    (40) Subfactor -> . PLUS
    (41) Subfactor -> . MINUS
    (61) EMPTY -> .

    LPAREN          shift and go to state 53
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    ID              reduce using rule 61 (EMPTY -> .)
    CTE_INT         reduce using rule 61 (EMPTY -> .)
    CTE_FLOAT       reduce using rule 61 (EMPTY -> .)

    Term                           shift and go to state 99
    Factor                         shift and go to state 52
    Subfactor                      shift and go to state 54
    EMPTY                          shift and go to state 55

state 76

    (30) EXPP -> MINUS . Term EXPP
    (32) Term -> . Factor SubTerm
    (36) Factor -> . LPAREN Expresion RPAREN
    (37) Factor -> . Subfactor ID
    (38) Factor -> . Subfactor CTE
    (39) Subfactor -> . EMPTY
    (40) Subfactor -> . PLUS
    (41) Subfactor -> . MINUS
    (61) EMPTY -> .

    LPAREN          shift and go to state 53
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    ID              reduce using rule 61 (EMPTY -> .)
    CTE_INT         reduce using rule 61 (EMPTY -> .)
    CTE_FLOAT       reduce using rule 61 (EMPTY -> .)

    Term                           shift and go to state 100
    Factor                         shift and go to state 52
    Subfactor                      shift and go to state 54
    EMPTY                          shift and go to state 55

state 77

    (31) EXPP -> EMPTY .

    GREATER         reduce using rule 31 (EXPP -> EMPTY .)
    LESS            reduce using rule 31 (EXPP -> EMPTY .)
    NOTEQUAL        reduce using rule 31 (EXPP -> EMPTY .)
    SEMICOLON       reduce using rule 31 (EXPP -> EMPTY .)
    COMMA           reduce using rule 31 (EXPP -> EMPTY .)
    RPAREN          reduce using rule 31 (EXPP -> EMPTY .)


state 78

    (32) Term -> Factor SubTerm .

    PLUS            reduce using rule 32 (Term -> Factor SubTerm .)
    MINUS           reduce using rule 32 (Term -> Factor SubTerm .)
    GREATER         reduce using rule 32 (Term -> Factor SubTerm .)
    LESS            reduce using rule 32 (Term -> Factor SubTerm .)
    NOTEQUAL        reduce using rule 32 (Term -> Factor SubTerm .)
    SEMICOLON       reduce using rule 32 (Term -> Factor SubTerm .)
    COMMA           reduce using rule 32 (Term -> Factor SubTerm .)
    RPAREN          reduce using rule 32 (Term -> Factor SubTerm .)


state 79

    (33) SubTerm -> TIMES . Factor SubTerm
    (36) Factor -> . LPAREN Expresion RPAREN
    (37) Factor -> . Subfactor ID
    (38) Factor -> . Subfactor CTE
    (39) Subfactor -> . EMPTY
    (40) Subfactor -> . PLUS
    (41) Subfactor -> . MINUS
    (61) EMPTY -> .

    LPAREN          shift and go to state 53
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    ID              reduce using rule 61 (EMPTY -> .)
    CTE_INT         reduce using rule 61 (EMPTY -> .)
    CTE_FLOAT       reduce using rule 61 (EMPTY -> .)

    Factor                         shift and go to state 101
    Subfactor                      shift and go to state 54
    EMPTY                          shift and go to state 55

state 80

    (34) SubTerm -> DIVIDE . Factor SubTerm
    (36) Factor -> . LPAREN Expresion RPAREN
    (37) Factor -> . Subfactor ID
    (38) Factor -> . Subfactor CTE
    (39) Subfactor -> . EMPTY
    (40) Subfactor -> . PLUS
    (41) Subfactor -> . MINUS
    (61) EMPTY -> .

    LPAREN          shift and go to state 53
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    ID              reduce using rule 61 (EMPTY -> .)
    CTE_INT         reduce using rule 61 (EMPTY -> .)
    CTE_FLOAT       reduce using rule 61 (EMPTY -> .)

    Factor                         shift and go to state 102
    Subfactor                      shift and go to state 54
    EMPTY                          shift and go to state 55

state 81

    (35) SubTerm -> EMPTY .

    PLUS            reduce using rule 35 (SubTerm -> EMPTY .)
    MINUS           reduce using rule 35 (SubTerm -> EMPTY .)
    GREATER         reduce using rule 35 (SubTerm -> EMPTY .)
    LESS            reduce using rule 35 (SubTerm -> EMPTY .)
    NOTEQUAL        reduce using rule 35 (SubTerm -> EMPTY .)
    SEMICOLON       reduce using rule 35 (SubTerm -> EMPTY .)
    COMMA           reduce using rule 35 (SubTerm -> EMPTY .)
    RPAREN          reduce using rule 35 (SubTerm -> EMPTY .)


state 82

    (36) Factor -> LPAREN Expresion . RPAREN

    RPAREN          shift and go to state 103


state 83

    (37) Factor -> Subfactor ID .

    TIMES           reduce using rule 37 (Factor -> Subfactor ID .)
    DIVIDE          reduce using rule 37 (Factor -> Subfactor ID .)
    PLUS            reduce using rule 37 (Factor -> Subfactor ID .)
    MINUS           reduce using rule 37 (Factor -> Subfactor ID .)
    GREATER         reduce using rule 37 (Factor -> Subfactor ID .)
    LESS            reduce using rule 37 (Factor -> Subfactor ID .)
    NOTEQUAL        reduce using rule 37 (Factor -> Subfactor ID .)
    SEMICOLON       reduce using rule 37 (Factor -> Subfactor ID .)
    COMMA           reduce using rule 37 (Factor -> Subfactor ID .)
    RPAREN          reduce using rule 37 (Factor -> Subfactor ID .)


state 84

    (38) Factor -> Subfactor CTE .

    TIMES           reduce using rule 38 (Factor -> Subfactor CTE .)
    DIVIDE          reduce using rule 38 (Factor -> Subfactor CTE .)
    PLUS            reduce using rule 38 (Factor -> Subfactor CTE .)
    MINUS           reduce using rule 38 (Factor -> Subfactor CTE .)
    GREATER         reduce using rule 38 (Factor -> Subfactor CTE .)
    LESS            reduce using rule 38 (Factor -> Subfactor CTE .)
    NOTEQUAL        reduce using rule 38 (Factor -> Subfactor CTE .)
    SEMICOLON       reduce using rule 38 (Factor -> Subfactor CTE .)
    COMMA           reduce using rule 38 (Factor -> Subfactor CTE .)
    RPAREN          reduce using rule 38 (Factor -> Subfactor CTE .)


state 85

    (42) CTE -> CTE_INT .

    TIMES           reduce using rule 42 (CTE -> CTE_INT .)
    DIVIDE          reduce using rule 42 (CTE -> CTE_INT .)
    PLUS            reduce using rule 42 (CTE -> CTE_INT .)
    MINUS           reduce using rule 42 (CTE -> CTE_INT .)
    GREATER         reduce using rule 42 (CTE -> CTE_INT .)
    LESS            reduce using rule 42 (CTE -> CTE_INT .)
    NOTEQUAL        reduce using rule 42 (CTE -> CTE_INT .)
    SEMICOLON       reduce using rule 42 (CTE -> CTE_INT .)
    COMMA           reduce using rule 42 (CTE -> CTE_INT .)
    RPAREN          reduce using rule 42 (CTE -> CTE_INT .)


state 86

    (43) CTE -> CTE_FLOAT .

    TIMES           reduce using rule 43 (CTE -> CTE_FLOAT .)
    DIVIDE          reduce using rule 43 (CTE -> CTE_FLOAT .)
    PLUS            reduce using rule 43 (CTE -> CTE_FLOAT .)
    MINUS           reduce using rule 43 (CTE -> CTE_FLOAT .)
    GREATER         reduce using rule 43 (CTE -> CTE_FLOAT .)
    LESS            reduce using rule 43 (CTE -> CTE_FLOAT .)
    NOTEQUAL        reduce using rule 43 (CTE -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 43 (CTE -> CTE_FLOAT .)
    COMMA           reduce using rule 43 (CTE -> CTE_FLOAT .)
    RPAREN          reduce using rule 43 (CTE -> CTE_FLOAT .)


state 87

    (46) FCAL -> ID LPAREN FCALP RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 104


state 88

    (47) FCALP -> Expresion FCALPP .

    RPAREN          reduce using rule 47 (FCALP -> Expresion FCALPP .)


state 89

    (49) FCALPP -> COMMA . FCALP
    (47) FCALP -> . Expresion FCALPP
    (48) FCALP -> . EMPTY
    (22) Expresion -> . EXP ET
    (61) EMPTY -> .
    (28) EXP -> . Term EXPP
    (32) Term -> . Factor SubTerm
    (36) Factor -> . LPAREN Expresion RPAREN
    (37) Factor -> . Subfactor ID
    (38) Factor -> . Subfactor CTE
    (39) Subfactor -> . EMPTY
    (40) Subfactor -> . PLUS
    (41) Subfactor -> . MINUS

    RPAREN          reduce using rule 61 (EMPTY -> .)
    ID              reduce using rule 61 (EMPTY -> .)
    CTE_INT         reduce using rule 61 (EMPTY -> .)
    CTE_FLOAT       reduce using rule 61 (EMPTY -> .)
    LPAREN          shift and go to state 53
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57

    FCALP                          shift and go to state 105
    Expresion                      shift and go to state 59
    EMPTY                          shift and go to state 60
    EXP                            shift and go to state 50
    Term                           shift and go to state 51
    Factor                         shift and go to state 52
    Subfactor                      shift and go to state 54

state 90

    (50) FCALPP -> EMPTY .

    RPAREN          reduce using rule 50 (FCALPP -> EMPTY .)


state 91

    (52) PRI -> Expresion PRIP .

    ID              reduce using rule 52 (PRI -> Expresion PRIP .)
    PRINT           reduce using rule 52 (PRI -> Expresion PRIP .)
    IF              reduce using rule 52 (PRI -> Expresion PRIP .)
    WHILE           reduce using rule 52 (PRI -> Expresion PRIP .)
    DO              reduce using rule 52 (PRI -> Expresion PRIP .)
    RBRACE          reduce using rule 52 (PRI -> Expresion PRIP .)


state 92

    (54) PRIP -> COMMA . PRI
    (52) PRI -> . Expresion PRIP
    (53) PRI -> . CTE_STRING PRIP
    (22) Expresion -> . EXP ET
    (28) EXP -> . Term EXPP
    (32) Term -> . Factor SubTerm
    (36) Factor -> . LPAREN Expresion RPAREN
    (37) Factor -> . Subfactor ID
    (38) Factor -> . Subfactor CTE
    (39) Subfactor -> . EMPTY
    (40) Subfactor -> . PLUS
    (41) Subfactor -> . MINUS
    (61) EMPTY -> .

    CTE_STRING      shift and go to state 63
    LPAREN          shift and go to state 53
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    ID              reduce using rule 61 (EMPTY -> .)
    CTE_INT         reduce using rule 61 (EMPTY -> .)
    CTE_FLOAT       reduce using rule 61 (EMPTY -> .)

    PRI                            shift and go to state 106
    Expresion                      shift and go to state 62
    EXP                            shift and go to state 50
    Term                           shift and go to state 51
    Factor                         shift and go to state 52
    Subfactor                      shift and go to state 54
    EMPTY                          shift and go to state 55

state 93

    (55) PRIP -> RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 107


state 94

    (53) PRI -> CTE_STRING PRIP .

    ID              reduce using rule 53 (PRI -> CTE_STRING PRIP .)
    PRINT           reduce using rule 53 (PRI -> CTE_STRING PRIP .)
    IF              reduce using rule 53 (PRI -> CTE_STRING PRIP .)
    WHILE           reduce using rule 53 (PRI -> CTE_STRING PRIP .)
    DO              reduce using rule 53 (PRI -> CTE_STRING PRIP .)
    RBRACE          reduce using rule 53 (PRI -> CTE_STRING PRIP .)


state 95

    (56) condition -> IF LPAREN Expresion RPAREN . BODY subcondition
    (12) BODY -> . LBRACE STATEMENTS RBRACE

    LBRACE          shift and go to state 17

    BODY                           shift and go to state 108

state 96

    (59) cycle -> WHILE LPAREN Expresion RPAREN . BODY
    (12) BODY -> . LBRACE STATEMENTS RBRACE

    LBRACE          shift and go to state 17

    BODY                           shift and go to state 109

state 97

    (60) do_while -> DO BODY WHILE LPAREN . Expresion RPAREN SEMICOLON
    (22) Expresion -> . EXP ET
    (28) EXP -> . Term EXPP
    (32) Term -> . Factor SubTerm
    (36) Factor -> . LPAREN Expresion RPAREN
    (37) Factor -> . Subfactor ID
    (38) Factor -> . Subfactor CTE
    (39) Subfactor -> . EMPTY
    (40) Subfactor -> . PLUS
    (41) Subfactor -> . MINUS
    (61) EMPTY -> .

    LPAREN          shift and go to state 53
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    ID              reduce using rule 61 (EMPTY -> .)
    CTE_INT         reduce using rule 61 (EMPTY -> .)
    CTE_FLOAT       reduce using rule 61 (EMPTY -> .)

    Expresion                      shift and go to state 110
    EXP                            shift and go to state 50
    Term                           shift and go to state 51
    Factor                         shift and go to state 52
    Subfactor                      shift and go to state 54
    EMPTY                          shift and go to state 55

state 98

    (23) ET -> ETP EXP .

    SEMICOLON       reduce using rule 23 (ET -> ETP EXP .)
    COMMA           reduce using rule 23 (ET -> ETP EXP .)
    RPAREN          reduce using rule 23 (ET -> ETP EXP .)


state 99

    (29) EXPP -> PLUS Term . EXPP
    (29) EXPP -> . PLUS Term EXPP
    (30) EXPP -> . MINUS Term EXPP
    (31) EXPP -> . EMPTY
    (61) EMPTY -> .

    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    GREATER         reduce using rule 61 (EMPTY -> .)
    LESS            reduce using rule 61 (EMPTY -> .)
    NOTEQUAL        reduce using rule 61 (EMPTY -> .)
    SEMICOLON       reduce using rule 61 (EMPTY -> .)
    COMMA           reduce using rule 61 (EMPTY -> .)
    RPAREN          reduce using rule 61 (EMPTY -> .)

    EXPP                           shift and go to state 111
    EMPTY                          shift and go to state 77

state 100

    (30) EXPP -> MINUS Term . EXPP
    (29) EXPP -> . PLUS Term EXPP
    (30) EXPP -> . MINUS Term EXPP
    (31) EXPP -> . EMPTY
    (61) EMPTY -> .

    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    GREATER         reduce using rule 61 (EMPTY -> .)
    LESS            reduce using rule 61 (EMPTY -> .)
    NOTEQUAL        reduce using rule 61 (EMPTY -> .)
    SEMICOLON       reduce using rule 61 (EMPTY -> .)
    COMMA           reduce using rule 61 (EMPTY -> .)
    RPAREN          reduce using rule 61 (EMPTY -> .)

    EXPP                           shift and go to state 112
    EMPTY                          shift and go to state 77

state 101

    (33) SubTerm -> TIMES Factor . SubTerm
    (33) SubTerm -> . TIMES Factor SubTerm
    (34) SubTerm -> . DIVIDE Factor SubTerm
    (35) SubTerm -> . EMPTY
    (61) EMPTY -> .

    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 80
    PLUS            reduce using rule 61 (EMPTY -> .)
    MINUS           reduce using rule 61 (EMPTY -> .)
    GREATER         reduce using rule 61 (EMPTY -> .)
    LESS            reduce using rule 61 (EMPTY -> .)
    NOTEQUAL        reduce using rule 61 (EMPTY -> .)
    SEMICOLON       reduce using rule 61 (EMPTY -> .)
    COMMA           reduce using rule 61 (EMPTY -> .)
    RPAREN          reduce using rule 61 (EMPTY -> .)

    SubTerm                        shift and go to state 113
    EMPTY                          shift and go to state 81

state 102

    (34) SubTerm -> DIVIDE Factor . SubTerm
    (33) SubTerm -> . TIMES Factor SubTerm
    (34) SubTerm -> . DIVIDE Factor SubTerm
    (35) SubTerm -> . EMPTY
    (61) EMPTY -> .

    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 80
    PLUS            reduce using rule 61 (EMPTY -> .)
    MINUS           reduce using rule 61 (EMPTY -> .)
    GREATER         reduce using rule 61 (EMPTY -> .)
    LESS            reduce using rule 61 (EMPTY -> .)
    NOTEQUAL        reduce using rule 61 (EMPTY -> .)
    SEMICOLON       reduce using rule 61 (EMPTY -> .)
    COMMA           reduce using rule 61 (EMPTY -> .)
    RPAREN          reduce using rule 61 (EMPTY -> .)

    SubTerm                        shift and go to state 114
    EMPTY                          shift and go to state 81

state 103

    (36) Factor -> LPAREN Expresion RPAREN .

    TIMES           reduce using rule 36 (Factor -> LPAREN Expresion RPAREN .)
    DIVIDE          reduce using rule 36 (Factor -> LPAREN Expresion RPAREN .)
    PLUS            reduce using rule 36 (Factor -> LPAREN Expresion RPAREN .)
    MINUS           reduce using rule 36 (Factor -> LPAREN Expresion RPAREN .)
    GREATER         reduce using rule 36 (Factor -> LPAREN Expresion RPAREN .)
    LESS            reduce using rule 36 (Factor -> LPAREN Expresion RPAREN .)
    NOTEQUAL        reduce using rule 36 (Factor -> LPAREN Expresion RPAREN .)
    SEMICOLON       reduce using rule 36 (Factor -> LPAREN Expresion RPAREN .)
    COMMA           reduce using rule 36 (Factor -> LPAREN Expresion RPAREN .)
    RPAREN          reduce using rule 36 (Factor -> LPAREN Expresion RPAREN .)


state 104

    (46) FCAL -> ID LPAREN FCALP RPAREN SEMICOLON .

    ID              reduce using rule 46 (FCAL -> ID LPAREN FCALP RPAREN SEMICOLON .)
    PRINT           reduce using rule 46 (FCAL -> ID LPAREN FCALP RPAREN SEMICOLON .)
    IF              reduce using rule 46 (FCAL -> ID LPAREN FCALP RPAREN SEMICOLON .)
    WHILE           reduce using rule 46 (FCAL -> ID LPAREN FCALP RPAREN SEMICOLON .)
    DO              reduce using rule 46 (FCAL -> ID LPAREN FCALP RPAREN SEMICOLON .)
    RBRACE          reduce using rule 46 (FCAL -> ID LPAREN FCALP RPAREN SEMICOLON .)


state 105

    (49) FCALPP -> COMMA FCALP .

    RPAREN          reduce using rule 49 (FCALPP -> COMMA FCALP .)


state 106

    (54) PRIP -> COMMA PRI .

    ID              reduce using rule 54 (PRIP -> COMMA PRI .)
    PRINT           reduce using rule 54 (PRIP -> COMMA PRI .)
    IF              reduce using rule 54 (PRIP -> COMMA PRI .)
    WHILE           reduce using rule 54 (PRIP -> COMMA PRI .)
    DO              reduce using rule 54 (PRIP -> COMMA PRI .)
    RBRACE          reduce using rule 54 (PRIP -> COMMA PRI .)


state 107

    (55) PRIP -> RPAREN SEMICOLON .

    ID              reduce using rule 55 (PRIP -> RPAREN SEMICOLON .)
    PRINT           reduce using rule 55 (PRIP -> RPAREN SEMICOLON .)
    IF              reduce using rule 55 (PRIP -> RPAREN SEMICOLON .)
    WHILE           reduce using rule 55 (PRIP -> RPAREN SEMICOLON .)
    DO              reduce using rule 55 (PRIP -> RPAREN SEMICOLON .)
    RBRACE          reduce using rule 55 (PRIP -> RPAREN SEMICOLON .)


state 108

    (56) condition -> IF LPAREN Expresion RPAREN BODY . subcondition
    (57) subcondition -> . ELSE BODY
    (58) subcondition -> . EMPTY
    (61) EMPTY -> .

    ELSE            shift and go to state 116
    ID              reduce using rule 61 (EMPTY -> .)
    PRINT           reduce using rule 61 (EMPTY -> .)
    IF              reduce using rule 61 (EMPTY -> .)
    WHILE           reduce using rule 61 (EMPTY -> .)
    DO              reduce using rule 61 (EMPTY -> .)
    RBRACE          reduce using rule 61 (EMPTY -> .)

    subcondition                   shift and go to state 115
    EMPTY                          shift and go to state 117

state 109

    (59) cycle -> WHILE LPAREN Expresion RPAREN BODY .

    ID              reduce using rule 59 (cycle -> WHILE LPAREN Expresion RPAREN BODY .)
    PRINT           reduce using rule 59 (cycle -> WHILE LPAREN Expresion RPAREN BODY .)
    IF              reduce using rule 59 (cycle -> WHILE LPAREN Expresion RPAREN BODY .)
    WHILE           reduce using rule 59 (cycle -> WHILE LPAREN Expresion RPAREN BODY .)
    DO              reduce using rule 59 (cycle -> WHILE LPAREN Expresion RPAREN BODY .)
    RBRACE          reduce using rule 59 (cycle -> WHILE LPAREN Expresion RPAREN BODY .)


state 110

    (60) do_while -> DO BODY WHILE LPAREN Expresion . RPAREN SEMICOLON

    RPAREN          shift and go to state 118


state 111

    (29) EXPP -> PLUS Term EXPP .

    GREATER         reduce using rule 29 (EXPP -> PLUS Term EXPP .)
    LESS            reduce using rule 29 (EXPP -> PLUS Term EXPP .)
    NOTEQUAL        reduce using rule 29 (EXPP -> PLUS Term EXPP .)
    SEMICOLON       reduce using rule 29 (EXPP -> PLUS Term EXPP .)
    COMMA           reduce using rule 29 (EXPP -> PLUS Term EXPP .)
    RPAREN          reduce using rule 29 (EXPP -> PLUS Term EXPP .)


state 112

    (30) EXPP -> MINUS Term EXPP .

    GREATER         reduce using rule 30 (EXPP -> MINUS Term EXPP .)
    LESS            reduce using rule 30 (EXPP -> MINUS Term EXPP .)
    NOTEQUAL        reduce using rule 30 (EXPP -> MINUS Term EXPP .)
    SEMICOLON       reduce using rule 30 (EXPP -> MINUS Term EXPP .)
    COMMA           reduce using rule 30 (EXPP -> MINUS Term EXPP .)
    RPAREN          reduce using rule 30 (EXPP -> MINUS Term EXPP .)


state 113

    (33) SubTerm -> TIMES Factor SubTerm .

    PLUS            reduce using rule 33 (SubTerm -> TIMES Factor SubTerm .)
    MINUS           reduce using rule 33 (SubTerm -> TIMES Factor SubTerm .)
    GREATER         reduce using rule 33 (SubTerm -> TIMES Factor SubTerm .)
    LESS            reduce using rule 33 (SubTerm -> TIMES Factor SubTerm .)
    NOTEQUAL        reduce using rule 33 (SubTerm -> TIMES Factor SubTerm .)
    SEMICOLON       reduce using rule 33 (SubTerm -> TIMES Factor SubTerm .)
    COMMA           reduce using rule 33 (SubTerm -> TIMES Factor SubTerm .)
    RPAREN          reduce using rule 33 (SubTerm -> TIMES Factor SubTerm .)


state 114

    (34) SubTerm -> DIVIDE Factor SubTerm .

    PLUS            reduce using rule 34 (SubTerm -> DIVIDE Factor SubTerm .)
    MINUS           reduce using rule 34 (SubTerm -> DIVIDE Factor SubTerm .)
    GREATER         reduce using rule 34 (SubTerm -> DIVIDE Factor SubTerm .)
    LESS            reduce using rule 34 (SubTerm -> DIVIDE Factor SubTerm .)
    NOTEQUAL        reduce using rule 34 (SubTerm -> DIVIDE Factor SubTerm .)
    SEMICOLON       reduce using rule 34 (SubTerm -> DIVIDE Factor SubTerm .)
    COMMA           reduce using rule 34 (SubTerm -> DIVIDE Factor SubTerm .)
    RPAREN          reduce using rule 34 (SubTerm -> DIVIDE Factor SubTerm .)


state 115

    (56) condition -> IF LPAREN Expresion RPAREN BODY subcondition .

    ID              reduce using rule 56 (condition -> IF LPAREN Expresion RPAREN BODY subcondition .)
    PRINT           reduce using rule 56 (condition -> IF LPAREN Expresion RPAREN BODY subcondition .)
    IF              reduce using rule 56 (condition -> IF LPAREN Expresion RPAREN BODY subcondition .)
    WHILE           reduce using rule 56 (condition -> IF LPAREN Expresion RPAREN BODY subcondition .)
    DO              reduce using rule 56 (condition -> IF LPAREN Expresion RPAREN BODY subcondition .)
    RBRACE          reduce using rule 56 (condition -> IF LPAREN Expresion RPAREN BODY subcondition .)


state 116

    (57) subcondition -> ELSE . BODY
    (12) BODY -> . LBRACE STATEMENTS RBRACE

    LBRACE          shift and go to state 17

    BODY                           shift and go to state 119

state 117

    (58) subcondition -> EMPTY .

    ID              reduce using rule 58 (subcondition -> EMPTY .)
    PRINT           reduce using rule 58 (subcondition -> EMPTY .)
    IF              reduce using rule 58 (subcondition -> EMPTY .)
    WHILE           reduce using rule 58 (subcondition -> EMPTY .)
    DO              reduce using rule 58 (subcondition -> EMPTY .)
    RBRACE          reduce using rule 58 (subcondition -> EMPTY .)


state 118

    (60) do_while -> DO BODY WHILE LPAREN Expresion RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 120


state 119

    (57) subcondition -> ELSE BODY .

    ID              reduce using rule 57 (subcondition -> ELSE BODY .)
    PRINT           reduce using rule 57 (subcondition -> ELSE BODY .)
    IF              reduce using rule 57 (subcondition -> ELSE BODY .)
    WHILE           reduce using rule 57 (subcondition -> ELSE BODY .)
    DO              reduce using rule 57 (subcondition -> ELSE BODY .)
    RBRACE          reduce using rule 57 (subcondition -> ELSE BODY .)


state 120

    (60) do_while -> DO BODY WHILE LPAREN Expresion RPAREN SEMICOLON .

    ID              reduce using rule 60 (do_while -> DO BODY WHILE LPAREN Expresion RPAREN SEMICOLON .)
    PRINT           reduce using rule 60 (do_while -> DO BODY WHILE LPAREN Expresion RPAREN SEMICOLON .)
    IF              reduce using rule 60 (do_while -> DO BODY WHILE LPAREN Expresion RPAREN SEMICOLON .)
    WHILE           reduce using rule 60 (do_while -> DO BODY WHILE LPAREN Expresion RPAREN SEMICOLON .)
    DO              reduce using rule 60 (do_while -> DO BODY WHILE LPAREN Expresion RPAREN SEMICOLON .)
    RBRACE          reduce using rule 60 (do_while -> DO BODY WHILE LPAREN Expresion RPAREN SEMICOLON .)

