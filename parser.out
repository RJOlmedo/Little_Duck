Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON a_vars a_funcs MAIN body END
Rule 2     a_vars -> empty
Rule 3     a_vars -> vars
Rule 4     a_funcs -> empty
Rule 5     a_funcs -> funcs b_funcs
Rule 6     b_funcs -> funcs b_funcs
Rule 7     b_funcs -> funcs
Rule 8     vars -> VAR ID COLON type SEMICOLON list_vars
Rule 9     list_vars -> empty
Rule 10    list_vars -> ID COLON type SEMICOLON list_vars
Rule 11    type -> INT
Rule 12    type -> FLOAT
Rule 13    body -> LBRACE list_statements RBRACE
Rule 14    list_statements -> statement body_rep
Rule 15    list_statements -> empty
Rule 16    list_statements -> statement
Rule 17    statement -> assign
Rule 18    statement -> condition
Rule 19    statement -> cycle
Rule 20    statement -> f_call
Rule 21    statement -> print_stmt
Rule 22    body_rep -> statement body_rep
Rule 23    body_rep -> statement
Rule 24    print_stmt -> PRINT LPAREN list_expresion RPAREN SEMICOLON
Rule 25    list_expresion -> expresion addPrint
Rule 26    list_expresion -> expresion addPrint COMMA list_expresion
Rule 27    list_expresion -> CTE_STRING addPrintString
Rule 28    list_expresion -> CTE_STRING addPrintString COMMA list_expresion
Rule 29    addPrint -> <empty>
Rule 30    addPrintString -> <empty>
Rule 31    assign -> ID add_operand EQUALS add_operador expresion SEMICOLON
Rule 32    add_operand -> <empty>
Rule 33    add_operador -> <empty>
Rule 34    cycle -> DO ciclo_start body WHILE LPAREN expresion RPAREN gotov SEMICOLON
Rule 35    ciclo_start -> <empty>
Rule 36    gotov -> <empty>
Rule 37    condition -> IF LPAREN expresion RPAREN gotof body else_part SEMICOLON
Rule 38    gotof -> <empty>
Rule 39    else_part -> ELSE goto body
Rule 40    else_part -> empty
Rule 41    goto -> <empty>
Rule 42    expresion -> exp comparar_exp exp
Rule 43    expresion -> exp
Rule 44    comparar_exp -> LT
Rule 45    comparar_exp -> GT
Rule 46    comparar_exp -> NE
Rule 47    exp -> termino add_termino
Rule 48    exp -> termino add_termino next_termino
Rule 49    add_termino -> <empty>
Rule 50    next_termino -> sum_rest exp
Rule 51    sum_rest -> PLUS
Rule 52    sum_rest -> MINUS
Rule 53    termino -> factor add_factor next_factor
Rule 54    termino -> factor add_factor
Rule 55    next_factor -> mult_div termino
Rule 56    mult_div -> TIMES
Rule 57    mult_div -> DIVIDE
Rule 58    factor -> LPAREN expresion RPAREN
Rule 59    factor -> id_cte
Rule 60    add_factor -> <empty>
Rule 61    id_cte -> ID push_var
Rule 62    id_cte -> cte push_const
Rule 63    push_const -> <empty>
Rule 64    push_var -> <empty>
Rule 65    cte -> CTE_INT
Rule 66    cte -> CTE_FLOAT
Rule 67    funcs -> VOID ID LPAREN list_params RPAREN LBRACE var_no_var body RBRACE SEMICOLON
Rule 68    list_params -> empty
Rule 69    list_params -> ID COLON type more_params
Rule 70    more_params -> empty
Rule 71    more_params -> COMMA ID COLON type more_params
Rule 72    var_no_var -> empty
Rule 73    var_no_var -> vars
Rule 74    f_call -> ID LPAREN RPAREN SEMICOLON
Rule 75    empty -> <empty>

Terminals, with rules where they appear

COLON                : 8 10 69 71
COMMA                : 26 28 71
CTE_FLOAT            : 66
CTE_INT              : 65
CTE_STRING           : 27 28
DIVIDE               : 57
DO                   : 34
ELSE                 : 39
END                  : 1
EQUALS               : 31
FLOAT                : 12
GT                   : 45
ID                   : 1 8 10 31 61 67 69 71 74
IF                   : 37
INT                  : 11
LBRACE               : 13 67
LPAREN               : 24 34 37 58 67 74
LT                   : 44
MAIN                 : 1
MINUS                : 52
NE                   : 46
PLUS                 : 51
PRINT                : 24
PROGRAM              : 1
RBRACE               : 13 67
RPAREN               : 24 34 37 58 67 74
SEMICOLON            : 1 8 10 24 31 34 37 67 74
TIMES                : 56
VAR                  : 8
VOID                 : 67
WHILE                : 34
error                : 

Nonterminals, with rules where they appear

a_funcs              : 1
a_vars               : 1
addPrint             : 25 26
addPrintString       : 27 28
add_factor           : 53 54
add_operador         : 31
add_operand          : 31
add_termino          : 47 48
assign               : 17
b_funcs              : 5 6
body                 : 1 34 37 39 67
body_rep             : 14 22
ciclo_start          : 34
comparar_exp         : 42
condition            : 18
cte                  : 62
cycle                : 19
else_part            : 37
empty                : 2 4 9 15 40 68 70 72
exp                  : 42 42 43 50
expresion            : 25 26 31 34 37 58
f_call               : 20
factor               : 53 54
funcs                : 5 6 7
goto                 : 39
gotof                : 37
gotov                : 34
id_cte               : 59
list_expresion       : 24 26 28
list_params          : 67
list_statements      : 13
list_vars            : 8 10
more_params          : 69 71
mult_div             : 55
next_factor          : 53
next_termino         : 48
print_stmt           : 21
program              : 0
push_const           : 62
push_var             : 61
statement            : 14 16 22 23
sum_rest             : 50
termino              : 47 48 55
type                 : 8 10 69 71
var_no_var           : 67
vars                 : 3 73

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON a_vars a_funcs MAIN body END

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON a_vars a_funcs MAIN body END

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON a_vars a_funcs MAIN body END

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . a_vars a_funcs MAIN body END
    (2) a_vars -> . empty
    (3) a_vars -> . vars
    (75) empty -> .
    (8) vars -> . VAR ID COLON type SEMICOLON list_vars

    VOID            reduce using rule 75 (empty -> .)
    MAIN            reduce using rule 75 (empty -> .)
    VAR             shift and go to state 8

    a_vars                         shift and go to state 5
    empty                          shift and go to state 6
    vars                           shift and go to state 7

state 5

    (1) program -> PROGRAM ID SEMICOLON a_vars . a_funcs MAIN body END
    (4) a_funcs -> . empty
    (5) a_funcs -> . funcs b_funcs
    (75) empty -> .
    (67) funcs -> . VOID ID LPAREN list_params RPAREN LBRACE var_no_var body RBRACE SEMICOLON

    MAIN            reduce using rule 75 (empty -> .)
    VOID            shift and go to state 12

    a_funcs                        shift and go to state 9
    empty                          shift and go to state 10
    funcs                          shift and go to state 11

state 6

    (2) a_vars -> empty .

    VOID            reduce using rule 2 (a_vars -> empty .)
    MAIN            reduce using rule 2 (a_vars -> empty .)


state 7

    (3) a_vars -> vars .

    VOID            reduce using rule 3 (a_vars -> vars .)
    MAIN            reduce using rule 3 (a_vars -> vars .)


state 8

    (8) vars -> VAR . ID COLON type SEMICOLON list_vars

    ID              shift and go to state 13


state 9

    (1) program -> PROGRAM ID SEMICOLON a_vars a_funcs . MAIN body END

    MAIN            shift and go to state 14


state 10

    (4) a_funcs -> empty .

    MAIN            reduce using rule 4 (a_funcs -> empty .)


state 11

    (5) a_funcs -> funcs . b_funcs
    (6) b_funcs -> . funcs b_funcs
    (7) b_funcs -> . funcs
    (67) funcs -> . VOID ID LPAREN list_params RPAREN LBRACE var_no_var body RBRACE SEMICOLON

    VOID            shift and go to state 12

    funcs                          shift and go to state 15
    b_funcs                        shift and go to state 16

state 12

    (67) funcs -> VOID . ID LPAREN list_params RPAREN LBRACE var_no_var body RBRACE SEMICOLON

    ID              shift and go to state 17


state 13

    (8) vars -> VAR ID . COLON type SEMICOLON list_vars

    COLON           shift and go to state 18


state 14

    (1) program -> PROGRAM ID SEMICOLON a_vars a_funcs MAIN . body END
    (13) body -> . LBRACE list_statements RBRACE

    LBRACE          shift and go to state 20

    body                           shift and go to state 19

state 15

    (6) b_funcs -> funcs . b_funcs
    (7) b_funcs -> funcs .
    (6) b_funcs -> . funcs b_funcs
    (7) b_funcs -> . funcs
    (67) funcs -> . VOID ID LPAREN list_params RPAREN LBRACE var_no_var body RBRACE SEMICOLON

    MAIN            reduce using rule 7 (b_funcs -> funcs .)
    VOID            shift and go to state 12

    funcs                          shift and go to state 15
    b_funcs                        shift and go to state 21

state 16

    (5) a_funcs -> funcs b_funcs .

    MAIN            reduce using rule 5 (a_funcs -> funcs b_funcs .)


state 17

    (67) funcs -> VOID ID . LPAREN list_params RPAREN LBRACE var_no_var body RBRACE SEMICOLON

    LPAREN          shift and go to state 22


state 18

    (8) vars -> VAR ID COLON . type SEMICOLON list_vars
    (11) type -> . INT
    (12) type -> . FLOAT

    INT             shift and go to state 24
    FLOAT           shift and go to state 25

    type                           shift and go to state 23

state 19

    (1) program -> PROGRAM ID SEMICOLON a_vars a_funcs MAIN body . END

    END             shift and go to state 26


state 20

    (13) body -> LBRACE . list_statements RBRACE
    (14) list_statements -> . statement body_rep
    (15) list_statements -> . empty
    (16) list_statements -> . statement
    (17) statement -> . assign
    (18) statement -> . condition
    (19) statement -> . cycle
    (20) statement -> . f_call
    (21) statement -> . print_stmt
    (75) empty -> .
    (31) assign -> . ID add_operand EQUALS add_operador expresion SEMICOLON
    (37) condition -> . IF LPAREN expresion RPAREN gotof body else_part SEMICOLON
    (34) cycle -> . DO ciclo_start body WHILE LPAREN expresion RPAREN gotov SEMICOLON
    (74) f_call -> . ID LPAREN RPAREN SEMICOLON
    (24) print_stmt -> . PRINT LPAREN list_expresion RPAREN SEMICOLON

    RBRACE          reduce using rule 75 (empty -> .)
    ID              shift and go to state 35
    IF              shift and go to state 36
    DO              shift and go to state 37
    PRINT           shift and go to state 38

    list_statements                shift and go to state 27
    statement                      shift and go to state 28
    empty                          shift and go to state 29
    assign                         shift and go to state 30
    condition                      shift and go to state 31
    cycle                          shift and go to state 32
    f_call                         shift and go to state 33
    print_stmt                     shift and go to state 34

state 21

    (6) b_funcs -> funcs b_funcs .

    MAIN            reduce using rule 6 (b_funcs -> funcs b_funcs .)


state 22

    (67) funcs -> VOID ID LPAREN . list_params RPAREN LBRACE var_no_var body RBRACE SEMICOLON
    (68) list_params -> . empty
    (69) list_params -> . ID COLON type more_params
    (75) empty -> .

    ID              shift and go to state 39
    RPAREN          reduce using rule 75 (empty -> .)

    list_params                    shift and go to state 40
    empty                          shift and go to state 41

state 23

    (8) vars -> VAR ID COLON type . SEMICOLON list_vars

    SEMICOLON       shift and go to state 42


state 24

    (11) type -> INT .

    SEMICOLON       reduce using rule 11 (type -> INT .)
    COMMA           reduce using rule 11 (type -> INT .)
    RPAREN          reduce using rule 11 (type -> INT .)


state 25

    (12) type -> FLOAT .

    SEMICOLON       reduce using rule 12 (type -> FLOAT .)
    COMMA           reduce using rule 12 (type -> FLOAT .)
    RPAREN          reduce using rule 12 (type -> FLOAT .)


state 26

    (1) program -> PROGRAM ID SEMICOLON a_vars a_funcs MAIN body END .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON a_vars a_funcs MAIN body END .)


state 27

    (13) body -> LBRACE list_statements . RBRACE

    RBRACE          shift and go to state 43


state 28

    (14) list_statements -> statement . body_rep
    (16) list_statements -> statement .
    (22) body_rep -> . statement body_rep
    (23) body_rep -> . statement
    (17) statement -> . assign
    (18) statement -> . condition
    (19) statement -> . cycle
    (20) statement -> . f_call
    (21) statement -> . print_stmt
    (31) assign -> . ID add_operand EQUALS add_operador expresion SEMICOLON
    (37) condition -> . IF LPAREN expresion RPAREN gotof body else_part SEMICOLON
    (34) cycle -> . DO ciclo_start body WHILE LPAREN expresion RPAREN gotov SEMICOLON
    (74) f_call -> . ID LPAREN RPAREN SEMICOLON
    (24) print_stmt -> . PRINT LPAREN list_expresion RPAREN SEMICOLON

    RBRACE          reduce using rule 16 (list_statements -> statement .)
    ID              shift and go to state 35
    IF              shift and go to state 36
    DO              shift and go to state 37
    PRINT           shift and go to state 38

    statement                      shift and go to state 44
    body_rep                       shift and go to state 45
    assign                         shift and go to state 30
    condition                      shift and go to state 31
    cycle                          shift and go to state 32
    f_call                         shift and go to state 33
    print_stmt                     shift and go to state 34

state 29

    (15) list_statements -> empty .

    RBRACE          reduce using rule 15 (list_statements -> empty .)


state 30

    (17) statement -> assign .

    ID              reduce using rule 17 (statement -> assign .)
    IF              reduce using rule 17 (statement -> assign .)
    DO              reduce using rule 17 (statement -> assign .)
    PRINT           reduce using rule 17 (statement -> assign .)
    RBRACE          reduce using rule 17 (statement -> assign .)


state 31

    (18) statement -> condition .

    ID              reduce using rule 18 (statement -> condition .)
    IF              reduce using rule 18 (statement -> condition .)
    DO              reduce using rule 18 (statement -> condition .)
    PRINT           reduce using rule 18 (statement -> condition .)
    RBRACE          reduce using rule 18 (statement -> condition .)


state 32

    (19) statement -> cycle .

    ID              reduce using rule 19 (statement -> cycle .)
    IF              reduce using rule 19 (statement -> cycle .)
    DO              reduce using rule 19 (statement -> cycle .)
    PRINT           reduce using rule 19 (statement -> cycle .)
    RBRACE          reduce using rule 19 (statement -> cycle .)


state 33

    (20) statement -> f_call .

    ID              reduce using rule 20 (statement -> f_call .)
    IF              reduce using rule 20 (statement -> f_call .)
    DO              reduce using rule 20 (statement -> f_call .)
    PRINT           reduce using rule 20 (statement -> f_call .)
    RBRACE          reduce using rule 20 (statement -> f_call .)


state 34

    (21) statement -> print_stmt .

    ID              reduce using rule 21 (statement -> print_stmt .)
    IF              reduce using rule 21 (statement -> print_stmt .)
    DO              reduce using rule 21 (statement -> print_stmt .)
    PRINT           reduce using rule 21 (statement -> print_stmt .)
    RBRACE          reduce using rule 21 (statement -> print_stmt .)


state 35

    (31) assign -> ID . add_operand EQUALS add_operador expresion SEMICOLON
    (74) f_call -> ID . LPAREN RPAREN SEMICOLON
    (32) add_operand -> .

    LPAREN          shift and go to state 47
    EQUALS          reduce using rule 32 (add_operand -> .)

    add_operand                    shift and go to state 46

state 36

    (37) condition -> IF . LPAREN expresion RPAREN gotof body else_part SEMICOLON

    LPAREN          shift and go to state 48


state 37

    (34) cycle -> DO . ciclo_start body WHILE LPAREN expresion RPAREN gotov SEMICOLON
    (35) ciclo_start -> .

    LBRACE          reduce using rule 35 (ciclo_start -> .)

    ciclo_start                    shift and go to state 49

state 38

    (24) print_stmt -> PRINT . LPAREN list_expresion RPAREN SEMICOLON

    LPAREN          shift and go to state 50


state 39

    (69) list_params -> ID . COLON type more_params

    COLON           shift and go to state 51


state 40

    (67) funcs -> VOID ID LPAREN list_params . RPAREN LBRACE var_no_var body RBRACE SEMICOLON

    RPAREN          shift and go to state 52


state 41

    (68) list_params -> empty .

    RPAREN          reduce using rule 68 (list_params -> empty .)


state 42

    (8) vars -> VAR ID COLON type SEMICOLON . list_vars
    (9) list_vars -> . empty
    (10) list_vars -> . ID COLON type SEMICOLON list_vars
    (75) empty -> .

    ID              shift and go to state 53
    VOID            reduce using rule 75 (empty -> .)
    MAIN            reduce using rule 75 (empty -> .)
    LBRACE          reduce using rule 75 (empty -> .)

    list_vars                      shift and go to state 54
    empty                          shift and go to state 55

state 43

    (13) body -> LBRACE list_statements RBRACE .

    END             reduce using rule 13 (body -> LBRACE list_statements RBRACE .)
    WHILE           reduce using rule 13 (body -> LBRACE list_statements RBRACE .)
    RBRACE          reduce using rule 13 (body -> LBRACE list_statements RBRACE .)
    ELSE            reduce using rule 13 (body -> LBRACE list_statements RBRACE .)
    SEMICOLON       reduce using rule 13 (body -> LBRACE list_statements RBRACE .)


state 44

    (22) body_rep -> statement . body_rep
    (23) body_rep -> statement .
    (22) body_rep -> . statement body_rep
    (23) body_rep -> . statement
    (17) statement -> . assign
    (18) statement -> . condition
    (19) statement -> . cycle
    (20) statement -> . f_call
    (21) statement -> . print_stmt
    (31) assign -> . ID add_operand EQUALS add_operador expresion SEMICOLON
    (37) condition -> . IF LPAREN expresion RPAREN gotof body else_part SEMICOLON
    (34) cycle -> . DO ciclo_start body WHILE LPAREN expresion RPAREN gotov SEMICOLON
    (74) f_call -> . ID LPAREN RPAREN SEMICOLON
    (24) print_stmt -> . PRINT LPAREN list_expresion RPAREN SEMICOLON

    RBRACE          reduce using rule 23 (body_rep -> statement .)
    ID              shift and go to state 35
    IF              shift and go to state 36
    DO              shift and go to state 37
    PRINT           shift and go to state 38

    statement                      shift and go to state 44
    body_rep                       shift and go to state 56
    assign                         shift and go to state 30
    condition                      shift and go to state 31
    cycle                          shift and go to state 32
    f_call                         shift and go to state 33
    print_stmt                     shift and go to state 34

state 45

    (14) list_statements -> statement body_rep .

    RBRACE          reduce using rule 14 (list_statements -> statement body_rep .)


state 46

    (31) assign -> ID add_operand . EQUALS add_operador expresion SEMICOLON

    EQUALS          shift and go to state 57


state 47

    (74) f_call -> ID LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 58


state 48

    (37) condition -> IF LPAREN . expresion RPAREN gotof body else_part SEMICOLON
    (42) expresion -> . exp comparar_exp exp
    (43) expresion -> . exp
    (47) exp -> . termino add_termino
    (48) exp -> . termino add_termino next_termino
    (53) termino -> . factor add_factor next_factor
    (54) termino -> . factor add_factor
    (58) factor -> . LPAREN expresion RPAREN
    (59) factor -> . id_cte
    (61) id_cte -> . ID push_var
    (62) id_cte -> . cte push_const
    (65) cte -> . CTE_INT
    (66) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 59
    ID              shift and go to state 65
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    expresion                      shift and go to state 60
    exp                            shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    id_cte                         shift and go to state 64
    cte                            shift and go to state 66

state 49

    (34) cycle -> DO ciclo_start . body WHILE LPAREN expresion RPAREN gotov SEMICOLON
    (13) body -> . LBRACE list_statements RBRACE

    LBRACE          shift and go to state 20

    body                           shift and go to state 69

state 50

    (24) print_stmt -> PRINT LPAREN . list_expresion RPAREN SEMICOLON
    (25) list_expresion -> . expresion addPrint
    (26) list_expresion -> . expresion addPrint COMMA list_expresion
    (27) list_expresion -> . CTE_STRING addPrintString
    (28) list_expresion -> . CTE_STRING addPrintString COMMA list_expresion
    (42) expresion -> . exp comparar_exp exp
    (43) expresion -> . exp
    (47) exp -> . termino add_termino
    (48) exp -> . termino add_termino next_termino
    (53) termino -> . factor add_factor next_factor
    (54) termino -> . factor add_factor
    (58) factor -> . LPAREN expresion RPAREN
    (59) factor -> . id_cte
    (61) id_cte -> . ID push_var
    (62) id_cte -> . cte push_const
    (65) cte -> . CTE_INT
    (66) cte -> . CTE_FLOAT

    CTE_STRING      shift and go to state 72
    LPAREN          shift and go to state 59
    ID              shift and go to state 65
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    list_expresion                 shift and go to state 70
    expresion                      shift and go to state 71
    exp                            shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    id_cte                         shift and go to state 64
    cte                            shift and go to state 66

state 51

    (69) list_params -> ID COLON . type more_params
    (11) type -> . INT
    (12) type -> . FLOAT

    INT             shift and go to state 24
    FLOAT           shift and go to state 25

    type                           shift and go to state 73

state 52

    (67) funcs -> VOID ID LPAREN list_params RPAREN . LBRACE var_no_var body RBRACE SEMICOLON

    LBRACE          shift and go to state 74


state 53

    (10) list_vars -> ID . COLON type SEMICOLON list_vars

    COLON           shift and go to state 75


state 54

    (8) vars -> VAR ID COLON type SEMICOLON list_vars .

    VOID            reduce using rule 8 (vars -> VAR ID COLON type SEMICOLON list_vars .)
    MAIN            reduce using rule 8 (vars -> VAR ID COLON type SEMICOLON list_vars .)
    LBRACE          reduce using rule 8 (vars -> VAR ID COLON type SEMICOLON list_vars .)


state 55

    (9) list_vars -> empty .

    VOID            reduce using rule 9 (list_vars -> empty .)
    MAIN            reduce using rule 9 (list_vars -> empty .)
    LBRACE          reduce using rule 9 (list_vars -> empty .)


state 56

    (22) body_rep -> statement body_rep .

    RBRACE          reduce using rule 22 (body_rep -> statement body_rep .)


state 57

    (31) assign -> ID add_operand EQUALS . add_operador expresion SEMICOLON
    (33) add_operador -> .

    LPAREN          reduce using rule 33 (add_operador -> .)
    ID              reduce using rule 33 (add_operador -> .)
    CTE_INT         reduce using rule 33 (add_operador -> .)
    CTE_FLOAT       reduce using rule 33 (add_operador -> .)

    add_operador                   shift and go to state 76

state 58

    (74) f_call -> ID LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 77


state 59

    (58) factor -> LPAREN . expresion RPAREN
    (42) expresion -> . exp comparar_exp exp
    (43) expresion -> . exp
    (47) exp -> . termino add_termino
    (48) exp -> . termino add_termino next_termino
    (53) termino -> . factor add_factor next_factor
    (54) termino -> . factor add_factor
    (58) factor -> . LPAREN expresion RPAREN
    (59) factor -> . id_cte
    (61) id_cte -> . ID push_var
    (62) id_cte -> . cte push_const
    (65) cte -> . CTE_INT
    (66) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 59
    ID              shift and go to state 65
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    expresion                      shift and go to state 78
    exp                            shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    id_cte                         shift and go to state 64
    cte                            shift and go to state 66

state 60

    (37) condition -> IF LPAREN expresion . RPAREN gotof body else_part SEMICOLON

    RPAREN          shift and go to state 79


state 61

    (42) expresion -> exp . comparar_exp exp
    (43) expresion -> exp .
    (44) comparar_exp -> . LT
    (45) comparar_exp -> . GT
    (46) comparar_exp -> . NE

    RPAREN          reduce using rule 43 (expresion -> exp .)
    COMMA           reduce using rule 43 (expresion -> exp .)
    SEMICOLON       reduce using rule 43 (expresion -> exp .)
    LT              shift and go to state 81
    GT              shift and go to state 82
    NE              shift and go to state 83

    comparar_exp                   shift and go to state 80

state 62

    (47) exp -> termino . add_termino
    (48) exp -> termino . add_termino next_termino
    (49) add_termino -> .

    PLUS            reduce using rule 49 (add_termino -> .)
    MINUS           reduce using rule 49 (add_termino -> .)
    LT              reduce using rule 49 (add_termino -> .)
    GT              reduce using rule 49 (add_termino -> .)
    NE              reduce using rule 49 (add_termino -> .)
    RPAREN          reduce using rule 49 (add_termino -> .)
    COMMA           reduce using rule 49 (add_termino -> .)
    SEMICOLON       reduce using rule 49 (add_termino -> .)

    add_termino                    shift and go to state 84

state 63

    (53) termino -> factor . add_factor next_factor
    (54) termino -> factor . add_factor
    (60) add_factor -> .

    TIMES           reduce using rule 60 (add_factor -> .)
    DIVIDE          reduce using rule 60 (add_factor -> .)
    PLUS            reduce using rule 60 (add_factor -> .)
    MINUS           reduce using rule 60 (add_factor -> .)
    LT              reduce using rule 60 (add_factor -> .)
    GT              reduce using rule 60 (add_factor -> .)
    NE              reduce using rule 60 (add_factor -> .)
    RPAREN          reduce using rule 60 (add_factor -> .)
    COMMA           reduce using rule 60 (add_factor -> .)
    SEMICOLON       reduce using rule 60 (add_factor -> .)

    add_factor                     shift and go to state 85

state 64

    (59) factor -> id_cte .

    TIMES           reduce using rule 59 (factor -> id_cte .)
    DIVIDE          reduce using rule 59 (factor -> id_cte .)
    PLUS            reduce using rule 59 (factor -> id_cte .)
    MINUS           reduce using rule 59 (factor -> id_cte .)
    LT              reduce using rule 59 (factor -> id_cte .)
    GT              reduce using rule 59 (factor -> id_cte .)
    NE              reduce using rule 59 (factor -> id_cte .)
    RPAREN          reduce using rule 59 (factor -> id_cte .)
    COMMA           reduce using rule 59 (factor -> id_cte .)
    SEMICOLON       reduce using rule 59 (factor -> id_cte .)


state 65

    (61) id_cte -> ID . push_var
    (64) push_var -> .

    TIMES           reduce using rule 64 (push_var -> .)
    DIVIDE          reduce using rule 64 (push_var -> .)
    PLUS            reduce using rule 64 (push_var -> .)
    MINUS           reduce using rule 64 (push_var -> .)
    LT              reduce using rule 64 (push_var -> .)
    GT              reduce using rule 64 (push_var -> .)
    NE              reduce using rule 64 (push_var -> .)
    RPAREN          reduce using rule 64 (push_var -> .)
    COMMA           reduce using rule 64 (push_var -> .)
    SEMICOLON       reduce using rule 64 (push_var -> .)

    push_var                       shift and go to state 86

state 66

    (62) id_cte -> cte . push_const
    (63) push_const -> .

    TIMES           reduce using rule 63 (push_const -> .)
    DIVIDE          reduce using rule 63 (push_const -> .)
    PLUS            reduce using rule 63 (push_const -> .)
    MINUS           reduce using rule 63 (push_const -> .)
    LT              reduce using rule 63 (push_const -> .)
    GT              reduce using rule 63 (push_const -> .)
    NE              reduce using rule 63 (push_const -> .)
    RPAREN          reduce using rule 63 (push_const -> .)
    COMMA           reduce using rule 63 (push_const -> .)
    SEMICOLON       reduce using rule 63 (push_const -> .)

    push_const                     shift and go to state 87

state 67

    (65) cte -> CTE_INT .

    TIMES           reduce using rule 65 (cte -> CTE_INT .)
    DIVIDE          reduce using rule 65 (cte -> CTE_INT .)
    PLUS            reduce using rule 65 (cte -> CTE_INT .)
    MINUS           reduce using rule 65 (cte -> CTE_INT .)
    LT              reduce using rule 65 (cte -> CTE_INT .)
    GT              reduce using rule 65 (cte -> CTE_INT .)
    NE              reduce using rule 65 (cte -> CTE_INT .)
    RPAREN          reduce using rule 65 (cte -> CTE_INT .)
    COMMA           reduce using rule 65 (cte -> CTE_INT .)
    SEMICOLON       reduce using rule 65 (cte -> CTE_INT .)


state 68

    (66) cte -> CTE_FLOAT .

    TIMES           reduce using rule 66 (cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 66 (cte -> CTE_FLOAT .)
    PLUS            reduce using rule 66 (cte -> CTE_FLOAT .)
    MINUS           reduce using rule 66 (cte -> CTE_FLOAT .)
    LT              reduce using rule 66 (cte -> CTE_FLOAT .)
    GT              reduce using rule 66 (cte -> CTE_FLOAT .)
    NE              reduce using rule 66 (cte -> CTE_FLOAT .)
    RPAREN          reduce using rule 66 (cte -> CTE_FLOAT .)
    COMMA           reduce using rule 66 (cte -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 66 (cte -> CTE_FLOAT .)


state 69

    (34) cycle -> DO ciclo_start body . WHILE LPAREN expresion RPAREN gotov SEMICOLON

    WHILE           shift and go to state 88


state 70

    (24) print_stmt -> PRINT LPAREN list_expresion . RPAREN SEMICOLON

    RPAREN          shift and go to state 89


state 71

    (25) list_expresion -> expresion . addPrint
    (26) list_expresion -> expresion . addPrint COMMA list_expresion
    (29) addPrint -> .

    COMMA           reduce using rule 29 (addPrint -> .)
    RPAREN          reduce using rule 29 (addPrint -> .)

    addPrint                       shift and go to state 90

state 72

    (27) list_expresion -> CTE_STRING . addPrintString
    (28) list_expresion -> CTE_STRING . addPrintString COMMA list_expresion
    (30) addPrintString -> .

    COMMA           reduce using rule 30 (addPrintString -> .)
    RPAREN          reduce using rule 30 (addPrintString -> .)

    addPrintString                 shift and go to state 91

state 73

    (69) list_params -> ID COLON type . more_params
    (70) more_params -> . empty
    (71) more_params -> . COMMA ID COLON type more_params
    (75) empty -> .

    COMMA           shift and go to state 94
    RPAREN          reduce using rule 75 (empty -> .)

    more_params                    shift and go to state 92
    empty                          shift and go to state 93

state 74

    (67) funcs -> VOID ID LPAREN list_params RPAREN LBRACE . var_no_var body RBRACE SEMICOLON
    (72) var_no_var -> . empty
    (73) var_no_var -> . vars
    (75) empty -> .
    (8) vars -> . VAR ID COLON type SEMICOLON list_vars

    LBRACE          reduce using rule 75 (empty -> .)
    VAR             shift and go to state 8

    var_no_var                     shift and go to state 95
    empty                          shift and go to state 96
    vars                           shift and go to state 97

state 75

    (10) list_vars -> ID COLON . type SEMICOLON list_vars
    (11) type -> . INT
    (12) type -> . FLOAT

    INT             shift and go to state 24
    FLOAT           shift and go to state 25

    type                           shift and go to state 98

state 76

    (31) assign -> ID add_operand EQUALS add_operador . expresion SEMICOLON
    (42) expresion -> . exp comparar_exp exp
    (43) expresion -> . exp
    (47) exp -> . termino add_termino
    (48) exp -> . termino add_termino next_termino
    (53) termino -> . factor add_factor next_factor
    (54) termino -> . factor add_factor
    (58) factor -> . LPAREN expresion RPAREN
    (59) factor -> . id_cte
    (61) id_cte -> . ID push_var
    (62) id_cte -> . cte push_const
    (65) cte -> . CTE_INT
    (66) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 59
    ID              shift and go to state 65
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    expresion                      shift and go to state 99
    exp                            shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    id_cte                         shift and go to state 64
    cte                            shift and go to state 66

state 77

    (74) f_call -> ID LPAREN RPAREN SEMICOLON .

    ID              reduce using rule 74 (f_call -> ID LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 74 (f_call -> ID LPAREN RPAREN SEMICOLON .)
    DO              reduce using rule 74 (f_call -> ID LPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 74 (f_call -> ID LPAREN RPAREN SEMICOLON .)
    RBRACE          reduce using rule 74 (f_call -> ID LPAREN RPAREN SEMICOLON .)


state 78

    (58) factor -> LPAREN expresion . RPAREN

    RPAREN          shift and go to state 100


state 79

    (37) condition -> IF LPAREN expresion RPAREN . gotof body else_part SEMICOLON
    (38) gotof -> .

    LBRACE          reduce using rule 38 (gotof -> .)

    gotof                          shift and go to state 101

state 80

    (42) expresion -> exp comparar_exp . exp
    (47) exp -> . termino add_termino
    (48) exp -> . termino add_termino next_termino
    (53) termino -> . factor add_factor next_factor
    (54) termino -> . factor add_factor
    (58) factor -> . LPAREN expresion RPAREN
    (59) factor -> . id_cte
    (61) id_cte -> . ID push_var
    (62) id_cte -> . cte push_const
    (65) cte -> . CTE_INT
    (66) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 59
    ID              shift and go to state 65
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    exp                            shift and go to state 102
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    id_cte                         shift and go to state 64
    cte                            shift and go to state 66

state 81

    (44) comparar_exp -> LT .

    LPAREN          reduce using rule 44 (comparar_exp -> LT .)
    ID              reduce using rule 44 (comparar_exp -> LT .)
    CTE_INT         reduce using rule 44 (comparar_exp -> LT .)
    CTE_FLOAT       reduce using rule 44 (comparar_exp -> LT .)


state 82

    (45) comparar_exp -> GT .

    LPAREN          reduce using rule 45 (comparar_exp -> GT .)
    ID              reduce using rule 45 (comparar_exp -> GT .)
    CTE_INT         reduce using rule 45 (comparar_exp -> GT .)
    CTE_FLOAT       reduce using rule 45 (comparar_exp -> GT .)


state 83

    (46) comparar_exp -> NE .

    LPAREN          reduce using rule 46 (comparar_exp -> NE .)
    ID              reduce using rule 46 (comparar_exp -> NE .)
    CTE_INT         reduce using rule 46 (comparar_exp -> NE .)
    CTE_FLOAT       reduce using rule 46 (comparar_exp -> NE .)


state 84

    (47) exp -> termino add_termino .
    (48) exp -> termino add_termino . next_termino
    (50) next_termino -> . sum_rest exp
    (51) sum_rest -> . PLUS
    (52) sum_rest -> . MINUS

    LT              reduce using rule 47 (exp -> termino add_termino .)
    GT              reduce using rule 47 (exp -> termino add_termino .)
    NE              reduce using rule 47 (exp -> termino add_termino .)
    RPAREN          reduce using rule 47 (exp -> termino add_termino .)
    COMMA           reduce using rule 47 (exp -> termino add_termino .)
    SEMICOLON       reduce using rule 47 (exp -> termino add_termino .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106

    next_termino                   shift and go to state 103
    sum_rest                       shift and go to state 104

state 85

    (53) termino -> factor add_factor . next_factor
    (54) termino -> factor add_factor .
    (55) next_factor -> . mult_div termino
    (56) mult_div -> . TIMES
    (57) mult_div -> . DIVIDE

    PLUS            reduce using rule 54 (termino -> factor add_factor .)
    MINUS           reduce using rule 54 (termino -> factor add_factor .)
    LT              reduce using rule 54 (termino -> factor add_factor .)
    GT              reduce using rule 54 (termino -> factor add_factor .)
    NE              reduce using rule 54 (termino -> factor add_factor .)
    RPAREN          reduce using rule 54 (termino -> factor add_factor .)
    COMMA           reduce using rule 54 (termino -> factor add_factor .)
    SEMICOLON       reduce using rule 54 (termino -> factor add_factor .)
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 110

    next_factor                    shift and go to state 107
    mult_div                       shift and go to state 108

state 86

    (61) id_cte -> ID push_var .

    TIMES           reduce using rule 61 (id_cte -> ID push_var .)
    DIVIDE          reduce using rule 61 (id_cte -> ID push_var .)
    PLUS            reduce using rule 61 (id_cte -> ID push_var .)
    MINUS           reduce using rule 61 (id_cte -> ID push_var .)
    LT              reduce using rule 61 (id_cte -> ID push_var .)
    GT              reduce using rule 61 (id_cte -> ID push_var .)
    NE              reduce using rule 61 (id_cte -> ID push_var .)
    RPAREN          reduce using rule 61 (id_cte -> ID push_var .)
    COMMA           reduce using rule 61 (id_cte -> ID push_var .)
    SEMICOLON       reduce using rule 61 (id_cte -> ID push_var .)


state 87

    (62) id_cte -> cte push_const .

    TIMES           reduce using rule 62 (id_cte -> cte push_const .)
    DIVIDE          reduce using rule 62 (id_cte -> cte push_const .)
    PLUS            reduce using rule 62 (id_cte -> cte push_const .)
    MINUS           reduce using rule 62 (id_cte -> cte push_const .)
    LT              reduce using rule 62 (id_cte -> cte push_const .)
    GT              reduce using rule 62 (id_cte -> cte push_const .)
    NE              reduce using rule 62 (id_cte -> cte push_const .)
    RPAREN          reduce using rule 62 (id_cte -> cte push_const .)
    COMMA           reduce using rule 62 (id_cte -> cte push_const .)
    SEMICOLON       reduce using rule 62 (id_cte -> cte push_const .)


state 88

    (34) cycle -> DO ciclo_start body WHILE . LPAREN expresion RPAREN gotov SEMICOLON

    LPAREN          shift and go to state 111


state 89

    (24) print_stmt -> PRINT LPAREN list_expresion RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 112


state 90

    (25) list_expresion -> expresion addPrint .
    (26) list_expresion -> expresion addPrint . COMMA list_expresion

    RPAREN          reduce using rule 25 (list_expresion -> expresion addPrint .)
    COMMA           shift and go to state 113


state 91

    (27) list_expresion -> CTE_STRING addPrintString .
    (28) list_expresion -> CTE_STRING addPrintString . COMMA list_expresion

    RPAREN          reduce using rule 27 (list_expresion -> CTE_STRING addPrintString .)
    COMMA           shift and go to state 114


state 92

    (69) list_params -> ID COLON type more_params .

    RPAREN          reduce using rule 69 (list_params -> ID COLON type more_params .)


state 93

    (70) more_params -> empty .

    RPAREN          reduce using rule 70 (more_params -> empty .)


state 94

    (71) more_params -> COMMA . ID COLON type more_params

    ID              shift and go to state 115


state 95

    (67) funcs -> VOID ID LPAREN list_params RPAREN LBRACE var_no_var . body RBRACE SEMICOLON
    (13) body -> . LBRACE list_statements RBRACE

    LBRACE          shift and go to state 20

    body                           shift and go to state 116

state 96

    (72) var_no_var -> empty .

    LBRACE          reduce using rule 72 (var_no_var -> empty .)


state 97

    (73) var_no_var -> vars .

    LBRACE          reduce using rule 73 (var_no_var -> vars .)


state 98

    (10) list_vars -> ID COLON type . SEMICOLON list_vars

    SEMICOLON       shift and go to state 117


state 99

    (31) assign -> ID add_operand EQUALS add_operador expresion . SEMICOLON

    SEMICOLON       shift and go to state 118


state 100

    (58) factor -> LPAREN expresion RPAREN .

    TIMES           reduce using rule 58 (factor -> LPAREN expresion RPAREN .)
    DIVIDE          reduce using rule 58 (factor -> LPAREN expresion RPAREN .)
    PLUS            reduce using rule 58 (factor -> LPAREN expresion RPAREN .)
    MINUS           reduce using rule 58 (factor -> LPAREN expresion RPAREN .)
    LT              reduce using rule 58 (factor -> LPAREN expresion RPAREN .)
    GT              reduce using rule 58 (factor -> LPAREN expresion RPAREN .)
    NE              reduce using rule 58 (factor -> LPAREN expresion RPAREN .)
    RPAREN          reduce using rule 58 (factor -> LPAREN expresion RPAREN .)
    COMMA           reduce using rule 58 (factor -> LPAREN expresion RPAREN .)
    SEMICOLON       reduce using rule 58 (factor -> LPAREN expresion RPAREN .)


state 101

    (37) condition -> IF LPAREN expresion RPAREN gotof . body else_part SEMICOLON
    (13) body -> . LBRACE list_statements RBRACE

    LBRACE          shift and go to state 20

    body                           shift and go to state 119

state 102

    (42) expresion -> exp comparar_exp exp .

    RPAREN          reduce using rule 42 (expresion -> exp comparar_exp exp .)
    COMMA           reduce using rule 42 (expresion -> exp comparar_exp exp .)
    SEMICOLON       reduce using rule 42 (expresion -> exp comparar_exp exp .)


state 103

    (48) exp -> termino add_termino next_termino .

    LT              reduce using rule 48 (exp -> termino add_termino next_termino .)
    GT              reduce using rule 48 (exp -> termino add_termino next_termino .)
    NE              reduce using rule 48 (exp -> termino add_termino next_termino .)
    RPAREN          reduce using rule 48 (exp -> termino add_termino next_termino .)
    COMMA           reduce using rule 48 (exp -> termino add_termino next_termino .)
    SEMICOLON       reduce using rule 48 (exp -> termino add_termino next_termino .)


state 104

    (50) next_termino -> sum_rest . exp
    (47) exp -> . termino add_termino
    (48) exp -> . termino add_termino next_termino
    (53) termino -> . factor add_factor next_factor
    (54) termino -> . factor add_factor
    (58) factor -> . LPAREN expresion RPAREN
    (59) factor -> . id_cte
    (61) id_cte -> . ID push_var
    (62) id_cte -> . cte push_const
    (65) cte -> . CTE_INT
    (66) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 59
    ID              shift and go to state 65
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    exp                            shift and go to state 120
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    id_cte                         shift and go to state 64
    cte                            shift and go to state 66

state 105

    (51) sum_rest -> PLUS .

    LPAREN          reduce using rule 51 (sum_rest -> PLUS .)
    ID              reduce using rule 51 (sum_rest -> PLUS .)
    CTE_INT         reduce using rule 51 (sum_rest -> PLUS .)
    CTE_FLOAT       reduce using rule 51 (sum_rest -> PLUS .)


state 106

    (52) sum_rest -> MINUS .

    LPAREN          reduce using rule 52 (sum_rest -> MINUS .)
    ID              reduce using rule 52 (sum_rest -> MINUS .)
    CTE_INT         reduce using rule 52 (sum_rest -> MINUS .)
    CTE_FLOAT       reduce using rule 52 (sum_rest -> MINUS .)


state 107

    (53) termino -> factor add_factor next_factor .

    PLUS            reduce using rule 53 (termino -> factor add_factor next_factor .)
    MINUS           reduce using rule 53 (termino -> factor add_factor next_factor .)
    LT              reduce using rule 53 (termino -> factor add_factor next_factor .)
    GT              reduce using rule 53 (termino -> factor add_factor next_factor .)
    NE              reduce using rule 53 (termino -> factor add_factor next_factor .)
    RPAREN          reduce using rule 53 (termino -> factor add_factor next_factor .)
    COMMA           reduce using rule 53 (termino -> factor add_factor next_factor .)
    SEMICOLON       reduce using rule 53 (termino -> factor add_factor next_factor .)


state 108

    (55) next_factor -> mult_div . termino
    (53) termino -> . factor add_factor next_factor
    (54) termino -> . factor add_factor
    (58) factor -> . LPAREN expresion RPAREN
    (59) factor -> . id_cte
    (61) id_cte -> . ID push_var
    (62) id_cte -> . cte push_const
    (65) cte -> . CTE_INT
    (66) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 59
    ID              shift and go to state 65
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    termino                        shift and go to state 121
    factor                         shift and go to state 63
    id_cte                         shift and go to state 64
    cte                            shift and go to state 66

state 109

    (56) mult_div -> TIMES .

    LPAREN          reduce using rule 56 (mult_div -> TIMES .)
    ID              reduce using rule 56 (mult_div -> TIMES .)
    CTE_INT         reduce using rule 56 (mult_div -> TIMES .)
    CTE_FLOAT       reduce using rule 56 (mult_div -> TIMES .)


state 110

    (57) mult_div -> DIVIDE .

    LPAREN          reduce using rule 57 (mult_div -> DIVIDE .)
    ID              reduce using rule 57 (mult_div -> DIVIDE .)
    CTE_INT         reduce using rule 57 (mult_div -> DIVIDE .)
    CTE_FLOAT       reduce using rule 57 (mult_div -> DIVIDE .)


state 111

    (34) cycle -> DO ciclo_start body WHILE LPAREN . expresion RPAREN gotov SEMICOLON
    (42) expresion -> . exp comparar_exp exp
    (43) expresion -> . exp
    (47) exp -> . termino add_termino
    (48) exp -> . termino add_termino next_termino
    (53) termino -> . factor add_factor next_factor
    (54) termino -> . factor add_factor
    (58) factor -> . LPAREN expresion RPAREN
    (59) factor -> . id_cte
    (61) id_cte -> . ID push_var
    (62) id_cte -> . cte push_const
    (65) cte -> . CTE_INT
    (66) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 59
    ID              shift and go to state 65
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    expresion                      shift and go to state 122
    exp                            shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    id_cte                         shift and go to state 64
    cte                            shift and go to state 66

state 112

    (24) print_stmt -> PRINT LPAREN list_expresion RPAREN SEMICOLON .

    ID              reduce using rule 24 (print_stmt -> PRINT LPAREN list_expresion RPAREN SEMICOLON .)
    IF              reduce using rule 24 (print_stmt -> PRINT LPAREN list_expresion RPAREN SEMICOLON .)
    DO              reduce using rule 24 (print_stmt -> PRINT LPAREN list_expresion RPAREN SEMICOLON .)
    PRINT           reduce using rule 24 (print_stmt -> PRINT LPAREN list_expresion RPAREN SEMICOLON .)
    RBRACE          reduce using rule 24 (print_stmt -> PRINT LPAREN list_expresion RPAREN SEMICOLON .)


state 113

    (26) list_expresion -> expresion addPrint COMMA . list_expresion
    (25) list_expresion -> . expresion addPrint
    (26) list_expresion -> . expresion addPrint COMMA list_expresion
    (27) list_expresion -> . CTE_STRING addPrintString
    (28) list_expresion -> . CTE_STRING addPrintString COMMA list_expresion
    (42) expresion -> . exp comparar_exp exp
    (43) expresion -> . exp
    (47) exp -> . termino add_termino
    (48) exp -> . termino add_termino next_termino
    (53) termino -> . factor add_factor next_factor
    (54) termino -> . factor add_factor
    (58) factor -> . LPAREN expresion RPAREN
    (59) factor -> . id_cte
    (61) id_cte -> . ID push_var
    (62) id_cte -> . cte push_const
    (65) cte -> . CTE_INT
    (66) cte -> . CTE_FLOAT

    CTE_STRING      shift and go to state 72
    LPAREN          shift and go to state 59
    ID              shift and go to state 65
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    expresion                      shift and go to state 71
    list_expresion                 shift and go to state 123
    exp                            shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    id_cte                         shift and go to state 64
    cte                            shift and go to state 66

state 114

    (28) list_expresion -> CTE_STRING addPrintString COMMA . list_expresion
    (25) list_expresion -> . expresion addPrint
    (26) list_expresion -> . expresion addPrint COMMA list_expresion
    (27) list_expresion -> . CTE_STRING addPrintString
    (28) list_expresion -> . CTE_STRING addPrintString COMMA list_expresion
    (42) expresion -> . exp comparar_exp exp
    (43) expresion -> . exp
    (47) exp -> . termino add_termino
    (48) exp -> . termino add_termino next_termino
    (53) termino -> . factor add_factor next_factor
    (54) termino -> . factor add_factor
    (58) factor -> . LPAREN expresion RPAREN
    (59) factor -> . id_cte
    (61) id_cte -> . ID push_var
    (62) id_cte -> . cte push_const
    (65) cte -> . CTE_INT
    (66) cte -> . CTE_FLOAT

    CTE_STRING      shift and go to state 72
    LPAREN          shift and go to state 59
    ID              shift and go to state 65
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    list_expresion                 shift and go to state 124
    expresion                      shift and go to state 71
    exp                            shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    id_cte                         shift and go to state 64
    cte                            shift and go to state 66

state 115

    (71) more_params -> COMMA ID . COLON type more_params

    COLON           shift and go to state 125


state 116

    (67) funcs -> VOID ID LPAREN list_params RPAREN LBRACE var_no_var body . RBRACE SEMICOLON

    RBRACE          shift and go to state 126


state 117

    (10) list_vars -> ID COLON type SEMICOLON . list_vars
    (9) list_vars -> . empty
    (10) list_vars -> . ID COLON type SEMICOLON list_vars
    (75) empty -> .

    ID              shift and go to state 53
    VOID            reduce using rule 75 (empty -> .)
    MAIN            reduce using rule 75 (empty -> .)
    LBRACE          reduce using rule 75 (empty -> .)

    list_vars                      shift and go to state 127
    empty                          shift and go to state 55

state 118

    (31) assign -> ID add_operand EQUALS add_operador expresion SEMICOLON .

    ID              reduce using rule 31 (assign -> ID add_operand EQUALS add_operador expresion SEMICOLON .)
    IF              reduce using rule 31 (assign -> ID add_operand EQUALS add_operador expresion SEMICOLON .)
    DO              reduce using rule 31 (assign -> ID add_operand EQUALS add_operador expresion SEMICOLON .)
    PRINT           reduce using rule 31 (assign -> ID add_operand EQUALS add_operador expresion SEMICOLON .)
    RBRACE          reduce using rule 31 (assign -> ID add_operand EQUALS add_operador expresion SEMICOLON .)


state 119

    (37) condition -> IF LPAREN expresion RPAREN gotof body . else_part SEMICOLON
    (39) else_part -> . ELSE goto body
    (40) else_part -> . empty
    (75) empty -> .

    ELSE            shift and go to state 129
    SEMICOLON       reduce using rule 75 (empty -> .)

    else_part                      shift and go to state 128
    empty                          shift and go to state 130

state 120

    (50) next_termino -> sum_rest exp .

    LT              reduce using rule 50 (next_termino -> sum_rest exp .)
    GT              reduce using rule 50 (next_termino -> sum_rest exp .)
    NE              reduce using rule 50 (next_termino -> sum_rest exp .)
    RPAREN          reduce using rule 50 (next_termino -> sum_rest exp .)
    COMMA           reduce using rule 50 (next_termino -> sum_rest exp .)
    SEMICOLON       reduce using rule 50 (next_termino -> sum_rest exp .)


state 121

    (55) next_factor -> mult_div termino .

    PLUS            reduce using rule 55 (next_factor -> mult_div termino .)
    MINUS           reduce using rule 55 (next_factor -> mult_div termino .)
    LT              reduce using rule 55 (next_factor -> mult_div termino .)
    GT              reduce using rule 55 (next_factor -> mult_div termino .)
    NE              reduce using rule 55 (next_factor -> mult_div termino .)
    RPAREN          reduce using rule 55 (next_factor -> mult_div termino .)
    COMMA           reduce using rule 55 (next_factor -> mult_div termino .)
    SEMICOLON       reduce using rule 55 (next_factor -> mult_div termino .)


state 122

    (34) cycle -> DO ciclo_start body WHILE LPAREN expresion . RPAREN gotov SEMICOLON

    RPAREN          shift and go to state 131


state 123

    (26) list_expresion -> expresion addPrint COMMA list_expresion .

    RPAREN          reduce using rule 26 (list_expresion -> expresion addPrint COMMA list_expresion .)


state 124

    (28) list_expresion -> CTE_STRING addPrintString COMMA list_expresion .

    RPAREN          reduce using rule 28 (list_expresion -> CTE_STRING addPrintString COMMA list_expresion .)


state 125

    (71) more_params -> COMMA ID COLON . type more_params
    (11) type -> . INT
    (12) type -> . FLOAT

    INT             shift and go to state 24
    FLOAT           shift and go to state 25

    type                           shift and go to state 132

state 126

    (67) funcs -> VOID ID LPAREN list_params RPAREN LBRACE var_no_var body RBRACE . SEMICOLON

    SEMICOLON       shift and go to state 133


state 127

    (10) list_vars -> ID COLON type SEMICOLON list_vars .

    VOID            reduce using rule 10 (list_vars -> ID COLON type SEMICOLON list_vars .)
    MAIN            reduce using rule 10 (list_vars -> ID COLON type SEMICOLON list_vars .)
    LBRACE          reduce using rule 10 (list_vars -> ID COLON type SEMICOLON list_vars .)


state 128

    (37) condition -> IF LPAREN expresion RPAREN gotof body else_part . SEMICOLON

    SEMICOLON       shift and go to state 134


state 129

    (39) else_part -> ELSE . goto body
    (41) goto -> .

    LBRACE          reduce using rule 41 (goto -> .)

    goto                           shift and go to state 135

state 130

    (40) else_part -> empty .

    SEMICOLON       reduce using rule 40 (else_part -> empty .)


state 131

    (34) cycle -> DO ciclo_start body WHILE LPAREN expresion RPAREN . gotov SEMICOLON
    (36) gotov -> .

    SEMICOLON       reduce using rule 36 (gotov -> .)

    gotov                          shift and go to state 136

state 132

    (71) more_params -> COMMA ID COLON type . more_params
    (70) more_params -> . empty
    (71) more_params -> . COMMA ID COLON type more_params
    (75) empty -> .

    COMMA           shift and go to state 94
    RPAREN          reduce using rule 75 (empty -> .)

    more_params                    shift and go to state 137
    empty                          shift and go to state 93

state 133

    (67) funcs -> VOID ID LPAREN list_params RPAREN LBRACE var_no_var body RBRACE SEMICOLON .

    VOID            reduce using rule 67 (funcs -> VOID ID LPAREN list_params RPAREN LBRACE var_no_var body RBRACE SEMICOLON .)
    MAIN            reduce using rule 67 (funcs -> VOID ID LPAREN list_params RPAREN LBRACE var_no_var body RBRACE SEMICOLON .)


state 134

    (37) condition -> IF LPAREN expresion RPAREN gotof body else_part SEMICOLON .

    ID              reduce using rule 37 (condition -> IF LPAREN expresion RPAREN gotof body else_part SEMICOLON .)
    IF              reduce using rule 37 (condition -> IF LPAREN expresion RPAREN gotof body else_part SEMICOLON .)
    DO              reduce using rule 37 (condition -> IF LPAREN expresion RPAREN gotof body else_part SEMICOLON .)
    PRINT           reduce using rule 37 (condition -> IF LPAREN expresion RPAREN gotof body else_part SEMICOLON .)
    RBRACE          reduce using rule 37 (condition -> IF LPAREN expresion RPAREN gotof body else_part SEMICOLON .)


state 135

    (39) else_part -> ELSE goto . body
    (13) body -> . LBRACE list_statements RBRACE

    LBRACE          shift and go to state 20

    body                           shift and go to state 138

state 136

    (34) cycle -> DO ciclo_start body WHILE LPAREN expresion RPAREN gotov . SEMICOLON

    SEMICOLON       shift and go to state 139


state 137

    (71) more_params -> COMMA ID COLON type more_params .

    RPAREN          reduce using rule 71 (more_params -> COMMA ID COLON type more_params .)


state 138

    (39) else_part -> ELSE goto body .

    SEMICOLON       reduce using rule 39 (else_part -> ELSE goto body .)


state 139

    (34) cycle -> DO ciclo_start body WHILE LPAREN expresion RPAREN gotov SEMICOLON .

    ID              reduce using rule 34 (cycle -> DO ciclo_start body WHILE LPAREN expresion RPAREN gotov SEMICOLON .)
    IF              reduce using rule 34 (cycle -> DO ciclo_start body WHILE LPAREN expresion RPAREN gotov SEMICOLON .)
    DO              reduce using rule 34 (cycle -> DO ciclo_start body WHILE LPAREN expresion RPAREN gotov SEMICOLON .)
    PRINT           reduce using rule 34 (cycle -> DO ciclo_start body WHILE LPAREN expresion RPAREN gotov SEMICOLON .)
    RBRACE          reduce using rule 34 (cycle -> DO ciclo_start body WHILE LPAREN expresion RPAREN gotov SEMICOLON .)

